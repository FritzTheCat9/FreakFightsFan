@page "/fights/{FederationId:int}/{EventId:int}"
@inject IExceptionHandler ExceptionHandler
@inject IFightApiClient FightApiClient
@inject IEventApiClient EventApiClient
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Fights</PageTitle>

<MudBreadcrumbs Items="_items">
    <ItemTemplate Context="item">
        <MudLink Href="@item.Href">@item.Text</MudLink>
    </ItemTemplate>
</MudBreadcrumbs>

<MudPaper Style="margin: 0px 0px 40px 0px; padding: 10px 10px; background: #888;" Class="rounded-0" Elevation="0">
    <MudStack Row="true" Justify="Justify.FlexStart">
        <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="@(() => CreateFight())"/>
    </MudStack>
</MudPaper>

@if(Event is not null)
{
    <MudStack AlignItems="AlignItems.Center" Style="margin: 0px 0px 40px 0px;">
        <MudText Typo="Typo.h4">@Event.Name</MudText>
        <MudText Typo="Typo.h5">
            @(Event.Date.ToString("dd/MM/yyyy") + ", ")
            @if (Event.Hall is not null)
            {
                @(Event.Hall.Name + " ")
            }
            @if (Event.City is not null)
            {
                @Event.City.Name 
            }
        </MudText>  
    </MudStack>
}

@if (FightsList == null)
{
    <MudText>Loading...</MudText>
}
else if (FightsList.Count == 0)
{
    <MudText>No matching records found</MudText>
}
else
{
    <MudCard>
        <MudStack Justify="Justify.Center" Spacing="0">
            @foreach (var fight in FightsList)
            {
                <MudPaper Style="padding: 10px 10px; background: #888;" Class="rounded-0" Elevation="0">
                    <MudStack Row="true" Justify="Justify.FlexEnd">
                        <MudIconButton Icon="@Icons.Material.Filled.OndemandVideo" Size="Size.Small" OnClick="@(() => RedirectToVideo(fight))"
                            Disabled="(string.IsNullOrEmpty(fight.VideoUrl))"/>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => UpdateFight(fight))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => DeleteFight(fight.Id))" />
                        <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward" Size="Size.Small" OnClick="@(() => MoveFight(fight.Id, MoveDirection.Downwards))"
                                       Disabled="(fight.OrderNumber <= 1)" />
                        <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" Size="Size.Small" OnClick="@(() => MoveFight(fight.Id, MoveDirection.Upwards))"
                                       Disabled="(fight.OrderNumber >= FightsList.Count())" />
                    </MudStack>
                </MudPaper>
                <MudPaper Style="margin: 0px 0px 80px 0px; padding: 20px 20px 20px 20px; background: #E0E0E0;" Class="rounded-0" Elevation="0">
                    <MudStack Row="true" Justify="Justify.SpaceEvenly">
                        @foreach (var team in fight.Teams)
                        {
                            <MudPaper Class="rounded-0" Elevation="1" Style="padding: 5px 5px 5px 5px;">

                                @if (team.FighterInTeams.Count == 1)
                                {
                                    <DisplayFighterInTeam FighterInTeam="team.FighterInTeams.FirstOrDefault()" />
                                }
                                else
                                {
                                    <DisplayTeam TeamDto="team" />
                                }
                            </MudPaper>
                        }
                    </MudStack>
                </MudPaper>
            }
        </MudStack>
    </MudCard>
}

@code {
    [Parameter] public int FederationId { get; set; }
    [Parameter] public int EventId { get; set; }

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>();
    public List<FightDto> FightsList { get; set; }
    public EventDto Event { get; set; }

    protected override void OnParametersSet()
    {
        _items = new List<BreadcrumbItem>()
        {
            new BreadcrumbItem("Federations", href: "/federations"),
            new BreadcrumbItem("Events", href: $"/events/{FederationId}"),
            new BreadcrumbItem("Fights", href: null, disabled: true),
        };
    }

    protected override async Task OnInitializedAsync()
    {
        var getEventTask = GetEvent();
        var getAllFightersTask = GetAllFights();
        await Task.WhenAll(getEventTask, getAllFightersTask);
    }

    private async Task GetEvent()
    {
        try
        {
            Event = await EventApiClient.GetEvent(EventId);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            Event = null;
        }
    }

    private async Task GetAllFights()
    {
        var getAllFightsRequest = new GetAllFightsRequest
            {
                Page = 1,
                PageSize = FightsOptions.MaxFightsInOneEvent,
                EventId = EventId
            };

        try
        {
            FightsList = (await FightApiClient.GetAllFights(getAllFightsRequest)).Items;
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            FightsList = new List<FightDto>();
        }
    }

    private async Task DeleteFight(int id)
    {
        try
        {
            await FightApiClient.DeleteFight(id);
            await GetAllFights();
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }
    }

    private async Task MoveFight(int id, MoveDirection direction)
    {
        try
        {
            var request = new MoveFightRequest() { Id = id, Direction = direction };
            await FightApiClient.MoveFight(request);
            await GetAllFights();
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }
    }

    private async Task RedirectToVideo(FightDto fightDto)
    {
        if(!string.IsNullOrEmpty(fightDto.VideoUrl))
        {
            await JSRuntime.InvokeVoidAsync("open", fightDto.VideoUrl, "_blank");
        }
    }

    private async Task UpdateFight(FightDto fightDto)
    {
        var dialogOptions = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<UpdateFightDialog>();
        parameters.Add(x => x.UpdateFightRequest, new UpdateFightRequest
            {
                Id = fightDto.Id,
                Teams = new List<CreateTeamModel>(),
                VideoUrl = fightDto.VideoUrl,
            });

        parameters.Add(x => x.Teams, fightDto.Teams);
        parameters.Add(x => x.NumberOfTeams, fightDto.Teams.Count);

        var updateFightDialog = await DialogService.ShowAsync<UpdateFightDialog>("Update Fight", parameters, dialogOptions);
        var result = await updateFightDialog.Result;
        if (!result.Canceled)
            await GetAllFights();
    }

    private async Task CreateFight()
    {
        var dialogOptions = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<CreateFightDialog>();
        parameters.Add(x => x.CreateFightRequest, new CreateFightRequest()
            {
                EventId = EventId,
                Teams = new List<CreateTeamModel>(),
                VideoUrl = null,
            });
        parameters.Add(x => x.NumberOfTeams, 2);

        var createFightDialog = await DialogService.ShowAsync<CreateFightDialog>("Create Fight", parameters, dialogOptions);
        var result = await createFightDialog.Result;
        if (!result.Canceled)
            await GetAllFights();
    }
}
