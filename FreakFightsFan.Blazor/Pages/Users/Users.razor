@page "/users"
@attribute [Authorize(Policy = Policy.Admin)]

@inject IExceptionHandler ExceptionHandler
@inject IUserApiClient UserApiClient
@inject IDialogService DialogService
@inject IStringLocalizer<App> Localizer

<PageTitle>@Localizer[nameof(AppStrings.Users)]</PageTitle>

<FritzBreadcrumbs Items="_items" />

<MudTable ServerData="new Func<TableState, Task<TableData<UserDto>>>(ServerReload)"
          Dense="true" Hover="true" @ref="table" Context="user">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@Localizer[nameof(AppStrings.Users)]</MudText>
        <MudSpacer />
        <FritzSearchTextField @bind-Value="searchString" OnSearch="() => table.ReloadServerData()" />
    </ToolBarContent>
    <HeaderContent>
        @* <MudTh>Image</MudTh> *@
        <MudTh><MudTableSortLabel SortLabel="username" T="UserDto">@Localizer[nameof(AppStrings.UserName)]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="email" T="UserDto">@Localizer[nameof(AppStrings.Email)]</MudTableSortLabel></MudTh>
        <MudTh>@Localizer[nameof(AppStrings.Role)]</MudTh>
        <AuthorizeView Policy=@Policy.SuperAdmin>
            <MudTh>@Localizer[nameof(AppStrings.Actions)]</MudTh>
        </AuthorizeView>
    </HeaderContent>
    <RowTemplate>
       @*  <MudTd>
            @if (user.Image != null)
            {
                <MudLink Href="@user.Image.Url" Target="_blank">
                    <MudImage Src="@user.Image.Url" ObjectFit="ObjectFit.Contain" Width="200" Height="150" Alt="Image" />
                </MudLink>
            }
            else
            {
                <MudText>-</MudText>
            }
        </MudTd> *@
        <MudTd DataLabel="UserName">@user.UserName</MudTd>
        <MudTd DataLabel="Email">@user.Email</MudTd>
        <MudTh>
            <MudChip Variant="Variant.Outlined" Color="GetColorBasedOnPolicy(GetUserHighestPolicy(user))">@GetUserHighestPolicy(user)</MudChip>
        </MudTh>
        <AuthorizeView Policy=@Policy.SuperAdmin>
            <MudTd>
                @if(!user.IsSuperAdmin && user.IsAdmin)
                {
                    <MudTooltip Text="@Localizer[nameof(AppStrings.Degrade)]">
                        <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward" Size="Size.Small" OnClick="() => DegradeUser(user.Id)"/>
                    </MudTooltip>
                } 
                else if(!user.IsSuperAdmin && !user.IsAdmin)
                {
                    <MudTooltip Text="@Localizer[nameof(AppStrings.Promote)]">
                        <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" Size="Size.Small" OnClick="() => PromoteUser(user.Id)"/>
                    </MudTooltip>
                }

            </MudTd>
        </AuthorizeView>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>@Localizer[nameof(AppStrings.NoMatchingRecordsFound)]</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>@Localizer[nameof(AppStrings.Loading)]</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager RowsPerPageString="@Localizer[nameof(AppStrings.RowsPerPage)]" InfoFormat="@Localizer[nameof(AppStrings.PaginationInfoFormat)]" />
    </PagerContent>
</MudTable>

@code {
    private List<BreadcrumbItem> _items;

    private string searchString = "";
    private MudTable<UserDto> table;
    private PagedList<UserDto> MyUsers { get; set; }

    protected override void OnInitialized()
    {
        _items = new()
        {
            new(Localizer[nameof(AppStrings.Users)], href: null, disabled: true),
        };
    }

    private async Task<TableData<UserDto>> ServerReload(TableState state)
    {
        var query = new GetAllUsers.Query
        {
            Page = state.Page + 1,
            PageSize = state.PageSize,
            SortColumn = state.SortLabel,
            SortOrder = ((SortOrder)state.SortDirection),
            SearchTerm = searchString,
        };

        try
        {
            MyUsers = await UserApiClient.GetAllUsers(query);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            return new() { TotalItems = 0, Items = [] };
        }

        return new()
        {
            TotalItems = MyUsers.TotalCount,
            Items = MyUsers.Items
        };
    }

    private async Task PromoteUser(int id)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<InformationDialog>();
        parameters.Add(x => x.ContentText, Localizer[nameof(AppStrings.IncreaseUserPermissionsQuestion)]);

        var dialog = await DialogService.ShowAsync<InformationDialog>(Localizer[nameof(AppStrings.IncreaseUserPermissions)], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await UserApiClient.PromoteUser(id);
            await table.ReloadServerData();
        }
    }

    private async Task DegradeUser(int id)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<InformationDialog>();
        parameters.Add(x => x.ContentText, Localizer[nameof(AppStrings.DecreaseUserPermissionsQuestion)]);

        var dialog = await DialogService.ShowAsync<InformationDialog>(Localizer[nameof(AppStrings.DecreaseUserPermissions)], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await UserApiClient.DegradeUser(id);
            await table.ReloadServerData();
        }
    }
    
    private string GetUserHighestPolicy(UserDto user)
    {
        if (user.IsSuperAdmin)
            return Policy.SuperAdmin;

        if (user.IsAdmin)
            return Policy.Admin;

        return Policy.User;
    }

    private Color GetColorBasedOnPolicy(string policy)
    {
        if (policy == Policy.SuperAdmin)
            return Color.Info;
            
        if (policy == Policy.Admin)
            return Color.Error;

        return Color.Success;
    }
}
