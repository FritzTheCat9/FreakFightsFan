@implements IDialogContentComponent<CreateMyDictionary.Command>

@inject IMyDictionaryApiClient MyDictionaryApiClient
@inject IExceptionHandler ExceptionHandler

<EditForm @ref="@form" Model="Content">
    <FluentValidationValidator />
    <CustomValidator @ref="@CustomValidator" />

    <FluentDialogBody>
        <FluentTextField @bind-Value="Content.Name" Label="Name" style="width: 100%;" />
        <FluentValidationMessage For="@(() => Content.Name)" />

        <FluentTextField @bind-Value="Content.Code" Label="Code" style="width: 100%;" />
        <FluentValidationMessage For="@(() => Content.Code)" />
    </FluentDialogBody>

    <FluentDialogFooter>
        <FluentButton OnClick="HandleValidSubmit" Color="Fluent.Color.Info">Create</FluentButton>
    </FluentDialogFooter>
</EditForm>

@code {
    [CascadingParameter] FluentDialog Dialog { get; set; }
    [Parameter] public CreateMyDictionary.Command Content { get; set; } = new();

    private EditForm form;
    private CustomValidator CustomValidator;

    private async Task HandleValidSubmit()
    {
        try
        {
            var isValid = form.EditContext.Validate();

            if (isValid)
            {
                await MyDictionaryApiClient.CreateMyDictionary(Content);
                await Dialog.CloseAsync(Fluent.DialogResult.Ok(true));
            }
        }
        catch (MyValidationException validationException)
        {
            CustomValidator.DisplayErrors(validationException.Errors);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }
    }
}