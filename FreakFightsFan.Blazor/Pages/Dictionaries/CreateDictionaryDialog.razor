@inject IMyDictionaryApiClient MyDictionaryApiClient
@inject IExceptionHandler ExceptionHandler
@inject IStringLocalizer<App> Localizer

<EditForm Model="Command" OnValidSubmit="HandleValidSubmit">
    <CustomValidator @ref="CustomValidator" />
    <FluentValidationValidator />

    <MudDialog DefaultFocus="DefaultFocus.LastChild">
        <DialogContent>
            <FritzTextField Label="@Localizer[nameof(AppStrings.Name)]" @bind-Value="Command.Name" For="() => Command.Name" />
            <FritzValidationMessage For="() => Command.Name" />

            <FritzTextField Label="@Localizer[nameof(AppStrings.Code)]" @bind-Value="Command.Code" For="() => Command.Code" />
            <FritzValidationMessage For="() => Command.Code" />
        </DialogContent>
        <DialogActions>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">@Localizer[nameof(AppStrings.Create)]</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; }
    [Parameter] public CreateMyDictionary.Command Command { get; set; } = new();

    private CustomValidator CustomValidator = new();

    private async Task HandleValidSubmit()
    {
        try
        {
            await MyDictionaryApiClient.CreateMyDictionary(Command);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (MyValidationException validationException)
        {
            CustomValidator.DisplayErrors(validationException.Errors);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }
    }
}