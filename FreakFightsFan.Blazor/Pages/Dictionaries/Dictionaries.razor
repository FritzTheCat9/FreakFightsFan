@page "/dictionaries"
@attribute [Authorize(Policy = Policy.Admin)]

@inject IExceptionHandler ExceptionHandler
@inject IMyDictionaryApiClient MyDictionaryApiClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<PageTitle>Dictionaries</PageTitle>

<FritzBreadcrumbs Items="_items" />

<MudTable ServerData="new Func<TableState, Task<TableData<MyDictionaryDto>>>(ServerReload)"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Dictionaries</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="() => CreateDictionary()"/>
        <MudSpacer />
        <FritzSearchTextField @bind-Value="searchString" OnSearch="() => table.ReloadServerData()" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="name" T="MyDictionaryDto">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="code" T="MyDictionaryDto">Code</MudTableSortLabel></MudTh>
        <MudTh>Dictionary Items</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Code">@context.Code</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.List" Size="Size.Small" OnClick="() => RedirectToDictionaryItemsPage(context.Id)"/>
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="() => UpdateDictionary(context)"/>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="() => DeleteDictionary(context.Id)"/>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private List<BreadcrumbItem> _items = new()
    {
        new("Dictionaries", href: null, disabled: true),
    };

    private string searchString = "";
    private MudTable<MyDictionaryDto> table;
    private PagedList<MyDictionaryDto> MyDictionaries { get; set; }

    private async Task<TableData<MyDictionaryDto>> ServerReload(TableState state)
    {
        var query = new GetAllMyDictionaries.Query
        {
            Page = state.Page + 1,
            PageSize = state.PageSize,
            SortColumn = state.SortLabel,
            SortOrder = ((SortOrder)state.SortDirection),
            SearchTerm = searchString,
        };

        try
        {
            MyDictionaries = await MyDictionaryApiClient.GetAllMyDictionaries(query);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            return new() { TotalItems = 0, Items = [] };
        }

        return new()
        {
            TotalItems = MyDictionaries.TotalCount,
            Items = MyDictionaries.Items
        };
    }

    private void RedirectToDictionaryItemsPage(int id)
    {
        NavigationManager.NavigateTo($"/dictionary/{id}");
    }

    private async Task DeleteDictionary(int id)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<DeleteDialog>("Delete", options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                await MyDictionaryApiClient.DeleteMyDictionary(id);
                await table.ReloadServerData();
            }
            catch (Exception ex)
            {
                ExceptionHandler.HandleExceptions(ex);
            }          
        }
    }

    private async Task UpdateDictionary(MyDictionaryDto myDictionaryDto)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<UpdateDictionaryDialog>();
        parameters.Add(x => x.Command, new()
        {
            Id = myDictionaryDto.Id,
            Name = myDictionaryDto.Name,
            Code = myDictionaryDto.Code
        });

        var dialog = await DialogService.ShowAsync<UpdateDictionaryDialog>("Update Dictionary", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }

    private async Task CreateDictionary()
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<CreateDictionaryDialog>();
        parameters.Add(x => x.Command, new());

        var dialog = await DialogService.ShowAsync<CreateDictionaryDialog>("Create Dictionary", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }
}
