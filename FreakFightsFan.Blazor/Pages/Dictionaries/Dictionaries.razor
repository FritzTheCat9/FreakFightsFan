@page "/dictionaries"
@attribute [Authorize(Policy = Policy.Admin)]

@inject IExceptionHandler ExceptionHandler
@inject IMyDictionaryApiClient MyDictionaryApiClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> Localizer

<PageTitle>
    @Localizer[nameof(AppStrings.Dictionaries)]
</PageTitle>

<FritzBreadcrumbs Items="_items" />

<MudTable ServerData="new Func<TableState, Task<TableData<MyDictionaryDto>>>(ServerReload)"
          @ref="table"
          Dense="true"
          Hover="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">
            @Localizer[nameof(AppStrings.Dictionaries)]
        </MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Add"
                       Size="Size.Small"
                       OnClick="() => CreateDictionary()" />
        <MudSpacer />
        <FritzSearchTextField @bind-Value="searchString"
                              OnSearch="() => table.ReloadServerData()" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="name"
                               T="MyDictionaryDto">
                @Localizer[nameof(AppStrings.Name)]
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="code"
                               T="MyDictionaryDto">
                @Localizer[nameof(AppStrings.Code)]
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            @Localizer[nameof(AppStrings.DictionaryItems)]
        </MudTh>
        <MudTh>
            @Localizer[nameof(AppStrings.Actions)]
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">
            @context.Name
        </MudTd>
        <MudTd DataLabel="Code">
            @context.Code
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.List"
                           Size="Size.Small"
                           OnClick="() => RedirectToDictionaryItemsPage(context.Id)" />
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                           Size="Size.Small"
                           OnClick="() => UpdateDictionary(context)" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                           Size="Size.Small"
                           OnClick="() => DeleteDictionary(context.Id)" />
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>
            @Localizer[nameof(AppStrings.NoMatchingRecordsFound)]
        </MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>
            @Localizer[nameof(AppStrings.Loading)]
        </MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager RowsPerPageString="@Localizer[nameof(AppStrings.RowsPerPage)]"
                       InfoFormat="@Localizer[nameof(AppStrings.PaginationInfoFormat)]" />
    </PagerContent>
</MudTable>

@code {
    private List<BreadcrumbItem> _items;
    private string searchString = "";
    private MudTable<MyDictionaryDto> table;
    private PagedList<MyDictionaryDto> MyDictionaries { get; set; }

    protected override void OnInitialized()
    {
        _items = new()
        {
            new(Localizer[nameof(AppStrings.Dictionaries)], href: null, disabled: true),
        };
    }

    private async Task<TableData<MyDictionaryDto>> ServerReload(TableState state)
    {
        var query = new GetAllMyDictionaries.Query
            {
                Page = state.Page + 1,
                PageSize = state.PageSize,
                SortColumn = state.SortLabel,
                SortOrder = ((SortOrder)state.SortDirection),
                SearchTerm = searchString,
            };

        try
        {
            MyDictionaries = await MyDictionaryApiClient.GetAllMyDictionaries(query);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            return new() { TotalItems = 0, Items = [] };
        }

        return new()
            {
                TotalItems = MyDictionaries.TotalCount,
                Items = MyDictionaries.Items
            };
    }

    private void RedirectToDictionaryItemsPage(int id)
    {
        NavigationManager.NavigateTo($"/dictionary/{id}");
    }

    private async Task DeleteDictionary(int id)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<DeleteDialog>(Localizer[nameof(AppStrings.Delete)], options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                await MyDictionaryApiClient.DeleteMyDictionary(id);
                await table.ReloadServerData();
            }
            catch (Exception ex)
            {
                ExceptionHandler.HandleExceptions(ex);
            }
        }
    }

    private async Task UpdateDictionary(MyDictionaryDto myDictionaryDto)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<UpdateDictionaryDialog>();
        parameters.Add(x => x.Command, new()
            {
                Id = myDictionaryDto.Id,
                Name = myDictionaryDto.Name,
                Code = myDictionaryDto.Code
            });

        var dialog = await DialogService.ShowAsync<UpdateDictionaryDialog>(Localizer[nameof(AppStrings.UpdateDictionary)], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }

    private async Task CreateDictionary()
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<CreateDictionaryDialog>();
        parameters.Add(x => x.Command, new());

        var dialog = await DialogService.ShowAsync<CreateDictionaryDialog>(Localizer[nameof(AppStrings.CreateDictionary)], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }
}
