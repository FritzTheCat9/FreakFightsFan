@page "/events/{FederationId:int}"
@attribute [AllowAnonymous]

@inject IExceptionHandler ExceptionHandler
@inject IEventApiClient EventApiClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> Localizer

<PageTitle>@Localizer[nameof(AppStrings.Events)]</PageTitle>

<FritzBreadcrumbs Items="_items" />

<MudTable ServerData="new Func<TableState, Task<TableData<EventDto>>>(ServerReload)"
          Dense="true" Hover="true" @ref="table" Context="myEvent">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@Localizer[nameof(AppStrings.Events)]</MudText>
        <AuthorizeView Policy=@Policy.Admin>
            <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="() => CreateEvent()"/>
        </AuthorizeView>
        <MudSpacer />
        <FritzSearchTextField @bind-Value="searchString" OnSearch="() => table.ReloadServerData()" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="name" T="EventDto">@Localizer[nameof(AppStrings.Name)]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="date" T="EventDto">@Localizer[nameof(AppStrings.Date)]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="city" T="EventDto">@Localizer[nameof(AppStrings.City)]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="hall" T="EventDto">@Localizer[nameof(AppStrings.Hall)]</MudTableSortLabel></MudTh>
        <MudTh>@Localizer[nameof(AppStrings.Fights)]</MudTh>
        <AuthorizeView Policy=@Policy.Admin>
            <MudTh>@Localizer[nameof(AppStrings.Actions)]</MudTh>
        </AuthorizeView>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@myEvent.Name</MudTd>
        <MudTd DataLabel="Date">@myEvent.Date.ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="City">
            <DisplayDictionaryItemDto DictionaryItemDto="myEvent.City" />
        </MudTd>
        <MudTd DataLabel="Hall">
            <DisplayDictionaryItemDto DictionaryItemDto="myEvent.Hall" />
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.List" Size="Size.Small" OnClick="() => RedirectToFightsPage(myEvent.Id)"/>
        </MudTd>
        <AuthorizeView Policy=@Policy.Admin>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="() => UpdateEvent(myEvent)"/>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="() => DeleteEvent(myEvent.Id)"/>
            </MudTd>
        </AuthorizeView>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>@Localizer[nameof(AppStrings.NoMatchingRecordsFound)]</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>@Localizer[nameof(AppStrings.Loading)]</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager RowsPerPageString="@Localizer[nameof(AppStrings.RowsPerPage)]" InfoFormat="@Localizer[nameof(AppStrings.PaginationInfoFormat)]" />
    </PagerContent>
</MudTable>

@code {
    [Parameter] public int FederationId { get; set; }

    private List<BreadcrumbItem> _items;
    private string searchString = "";
    private MudTable<EventDto> table;
    private PagedList<EventDto> MyEvents { get; set; }

    protected override void OnInitialized()
    {
        _items = new()
        {
            new(Localizer[nameof(AppStrings.Federations)], href: "/federations"),
            new(Localizer[nameof(AppStrings.Events)], href: null, disabled: true),
        };
    }

    private async Task<TableData<EventDto>> ServerReload(TableState state)
    {
        var query = new GetAllEvents.Query
        {
            Page = state.Page + 1,
            PageSize = state.PageSize,
            SortColumn = state.SortLabel,
            SortOrder = ((SortOrder)state.SortDirection),
            SearchTerm = searchString,
            FederationId = FederationId,
        };

        try
        {
            MyEvents = await EventApiClient.GetAllEvents(query);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            return new() { TotalItems = 0, Items = [] };
        }

        return new()
        {
            TotalItems = MyEvents.TotalCount,
            Items = MyEvents.Items
        };
    }

    private void RedirectToFightsPage(int eventId)
    {
        NavigationManager.NavigateTo($"/fights/{FederationId}/{eventId}");
    }

    private async Task DeleteEvent(int id)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<DeleteDialog>(Localizer[nameof(AppStrings.Delete)], options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                await EventApiClient.DeleteEvent(id);
                await table.ReloadServerData();
            }
            catch (Exception ex)
            {
                ExceptionHandler.HandleExceptions(ex);
            }
        }
    }

    private async Task UpdateEvent(EventDto eventDto)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<UpdateEventDialog>();
        parameters.Add(x => x.Command, new()
        {
            Id = eventDto.Id,
            Name = eventDto.Name,
            Date = eventDto.Date,
            CityId = eventDto.City?.Id,
            HallId = eventDto.Hall?.Id
        });
        parameters.Add(x => x.City, eventDto.City);
        parameters.Add(x => x.Hall, eventDto.Hall);

        var dialog = await DialogService.ShowAsync<UpdateEventDialog>(Localizer[nameof(AppStrings.UpdateEvent)], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }

    private async Task CreateEvent()
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<CreateEventDialog>();
        parameters.Add(x => x.Command, new()
        {
            Name = "",
            Date = DateTime.UtcNow,
            FederationId = FederationId,
            CityId = null,
            HallId = null,
        });

        var dialog = await DialogService.ShowAsync<CreateEventDialog>(Localizer[nameof(AppStrings.CreateEvent)], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }
}
