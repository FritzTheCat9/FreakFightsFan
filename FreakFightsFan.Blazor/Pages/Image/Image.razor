@page "/images"
@attribute [Authorize(Policy = Policy.Admin)]

@inject IExceptionHandler ExceptionHandler
@inject IImageApiClient ImageApiClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<PageTitle>Images</PageTitle>

<MudBreadcrumbs Items="_items">
    <ItemTemplate Context="item">
        <MudLink Href="@item.Href">@item.Text</MudLink>
    </ItemTemplate>
</MudBreadcrumbs>

<MudTable ServerData="new Func<TableState, Task<TableData<ImageDto>>>(ServerReload)"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Images</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="() => CreateImage()"/>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Image</MudTh>
        <MudTh><MudTableSortLabel SortLabel="created" T="ImageDto">Created</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="modified" T="ImageDto">Modified</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name" T="ImageDto">Name</MudTableSortLabel></MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            @if(!string.IsNullOrEmpty(context.Url))
            {
                <MudLink Href="@context.Url" Target="_blank">
                    <MudImage Src="@context.Url" ObjectFit="ObjectFit.Contain" Width="200" Height="150" Alt="Image" />
                </MudLink>
            }
            else
            {
                <MudText>-</MudText>
            }
        </MudTd>
        <MudTd DataLabel="Created">@context.Created</MudTd>
        <MudTd DataLabel="Modified">@context.Modified</MudTd>
        <MudTd DataLabel="Modified">@context.Name</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="() => UpdateImage(context)"/>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="() => DeleteImage(context.Id)"/>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private MudTable<ImageDto> table;
    private PagedList<ImageDto> ImagesPagedList { get; set; }

    private List<BreadcrumbItem> _items = new()
    {
        new("Images", href: null, disabled: true),
    };

    private async Task<TableData<ImageDto>> ServerReload(TableState state)
    {
        var query = new GetAllImages.Query
        {
            Page = state.Page + 1,
            PageSize = state.PageSize,
            SortColumn = state.SortLabel,
            SortOrder = ((SortOrder)state.SortDirection),
        };

        try
        {
            ImagesPagedList = await ImageApiClient.GetAllImages(query);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            return new() { TotalItems = 0, Items = [] };
        }

        return new()
        {
            TotalItems = ImagesPagedList.TotalCount,
            Items = ImagesPagedList.Items
        };
    }

    private async Task DeleteImage(int id)
    {
        var dialogOptions = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<DeleteDialog>("Delete", dialogOptions);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                await ImageApiClient.DeleteImage(id);
                await table.ReloadServerData();
            }
            catch (Exception ex)
            {
                ExceptionHandler.HandleExceptions(ex);
            }
        }
    }

    private async Task UpdateImage(ImageDto imageDto)
    {
        var dialogOptions = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<UpdateImageDialog>();

        parameters.Add(x => x.Command, new()
        {
            Id = imageDto.Id,
            ImageBase64 = ""
        });
        parameters.Add(x => x.Url, imageDto.Url);

        var dialog = await DialogService.ShowAsync<UpdateImageDialog>("Update Image", parameters, dialogOptions);
        var result = await dialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }

    private async Task CreateImage()
    {
        var dialogOptions = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<CreateImageDialog>();
        parameters.Add(x => x.Command, new());

        var dialog = await DialogService.ShowAsync<CreateImageDialog>("Create Image", parameters, dialogOptions);
        var result = await dialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }
}
