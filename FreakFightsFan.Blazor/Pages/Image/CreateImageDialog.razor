@inject IImageApiClient ImageApiClient
@inject IExceptionHandler ExceptionHandler

<EditForm Model="Command" OnValidSubmit="HandleValidSubmit">
    <CustomValidator @ref="CustomValidator" />
    <FluentValidationValidator />

    <MudDialog DefaultFocus="DefaultFocus.LastChild">
        <DialogContent>
            <MyFileInput @bind-ImageBase64="Command.ImageBase64" @bind-IsImageValid="IsImageValid" @* @bind-ValidationErrors="validationErrors.Errors" *@ />
            @* <MyValidationMessage T="string" For="() => CreateImageCommand.ImageBase64" ValidationErrors="validationErrors" /> *@
            <ValidationMessage For="() => Command.ImageBase64" />
        </DialogContent>
        <DialogActions>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Create</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; }
    [Parameter] public CreateImage.Command Command { get; set; } = new();

    private CustomValidator CustomValidator = new();
    private bool IsImageValid { get; set; }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (!IsImageValid)
                return;

            await ImageApiClient.CreateImage(Command);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (MyValidationException validationException)
        {
            CustomValidator.DisplayErrors(validationException.Errors);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }
    }
}
