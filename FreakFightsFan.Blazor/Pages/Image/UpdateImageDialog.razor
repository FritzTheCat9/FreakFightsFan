@inject IImageApiClient ImageApiClient
@inject IExceptionHandler ExceptionHandler

<MudForm Model="UpdateImageCommand" @ref="form" Validation="validationErrors.Validate">
    <MudDialog DefaultFocus="DefaultFocus.LastChild">
        <DialogContent>
            <MyFileInput @bind-ImageBase64="UpdateImageCommand.ImageBase64" @bind-IsImageValid="IsImageValid" @bind-ValidationErrors="validationErrors.Errors" Url="@Url" />
            <MyValidationMessage T="string" For="() => UpdateImageCommand.ImageBase64" ValidationErrors="validationErrors" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton OnClick="HandleValidSubmit" Color="Color.Primary">Update</MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public UpdateImage.Command UpdateImageCommand { get; set; } = new();
    [Parameter] public string Url { get; set; }

    private ValidationErrors validationErrors = new();
    private MudForm form;
    private bool IsImageValid { get; set; }

    private void Cancel() => MudDialog.Cancel();

    private async Task HandleValidSubmit()
    {
        try
        {
            if (!IsImageValid)
                return;

            await ImageApiClient.UpdateImage(UpdateImageCommand);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (MyValidationException validationException)
        {
            validationErrors.Errors = validationException.Errors;
            await form.Validate();
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }
    }
}
