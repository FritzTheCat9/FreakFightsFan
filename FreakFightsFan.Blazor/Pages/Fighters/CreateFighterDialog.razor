@inject IFighterApiClient FighterApiClient
@inject IExceptionHandler ExceptionHandler

<MudForm Model="CreateFighterCommand" @ref="form" Validation="validationErrors.Validate">
    <MudDialog DefaultFocus="DefaultFocus.LastChild">
        <DialogContent>
            <MyFileInput @bind-ImageBase64="CreateFighterCommand.ImageBase64" @bind-IsImageValid="IsImageValid" @bind-ValidationErrors="validationErrors.Errors" />
            <MyValidationMessage T="string" For="() => CreateFighterCommand.ImageBase64" ValidationErrors="validationErrors" />

            <MudTextField Label="First Name" @bind-Value="CreateFighterCommand.FirstName" For="() => CreateFighterCommand.FirstName" />
            <MudTextField Label="Last Name" @bind-Value="CreateFighterCommand.LastName" For="() => CreateFighterCommand.LastName" />
            <MudTextField Label="Nickname" @bind-Value="CreateFighterCommand.Nickname" For="() => CreateFighterCommand.Nickname" />
            <MudTextField Label="Instagram Url" @bind-Value="CreateFighterCommand.InstagramUrl" For="() => CreateFighterCommand.InstagramUrl" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton OnClick="HandleValidSubmit" Color="Color.Primary">Create</MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public CreateFighter.Command CreateFighterCommand { get; set; } = new();

    private ValidationErrors validationErrors = new();
    private MudForm form;
    private bool IsImageValid { get; set; }

    private void Cancel() => MudDialog.Cancel();

    private async Task HandleValidSubmit()
    {
        try
        {
            if (!IsImageValid)
                CreateFighterCommand.ImageBase64 = null;

            await FighterApiClient.CreateFighter(CreateFighterCommand);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (MyValidationException validationException)
        {
            validationErrors.Errors = validationException.Errors;
            await form.Validate();
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }
    }
}