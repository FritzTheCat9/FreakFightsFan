@page "/fighters"
@inject IExceptionHandler ExceptionHandler
@inject IFighterHttpService FighterHttpService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<PageTitle>Fighters</PageTitle>

<MudTable ServerData="@(new Func<TableState, Task<TableData<FighterDto>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Fighters</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="@(() => CreateFighter())"></MudIconButton>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(searchText => OnSearch(searchText))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Image</MudTh>
        <MudTh><MudTableSortLabel SortLabel="firstname" T="FighterDto">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="lastname" T="FighterDto">Last Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="nickname" T="FighterDto">Nickname</MudTableSortLabel></MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            @if (context.Image != null)
            {
                <MudLink Href="@context.Image.Url" Target="_blank">
                    <MudImage Src="@context.Image.Url" ObjectFit="ObjectFit.Contain" Width="200" Height="150" Alt="Image" />
                </MudLink>
            }
        </MudTd>
        <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
        <MudTd DataLabel="LastName">@context.LastName</MudTd>
        <MudTd DataLabel="Nickname">@context.Nickname</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => UpdateFighter(@context))"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => DeleteFighter(@context.Id))"></MudIconButton>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private MudTable<FighterDto> table;
    private string searchString = "";
    public PagedList<FighterDto> FightersPagedList { get; set; }

    private async Task<TableData<FighterDto>> ServerReload(TableState state)
    {
        var getAllFightersRequest = new GetAllFightersRequest
            {
                Page = state.Page + 1,
                PageSize = state.PageSize,
                SortColumn = state.SortLabel,
                SortOrder = ((SortOrder)state.SortDirection),
                SearchTerm = searchString,
            };

        try
        {
            FightersPagedList = await FighterHttpService.GetAllFighters(getAllFightersRequest);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            return new TableData<FighterDto>() { TotalItems = 0, Items = new List<FighterDto>() };
        }

        return new TableData<FighterDto>()
            {
                TotalItems = FightersPagedList.TotalCount,
                Items = FightersPagedList.Items
            };
    }

    private void OnSearch(string searchText)
    {
        searchString = searchText;
        table.ReloadServerData();
    }

    private async Task DeleteFighter(int id)
    {
        try
        {
            await FighterHttpService.DeleteFighter(id);
            await table.ReloadServerData();
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }
    }

    private async Task UpdateFighter(FighterDto fighterDto)
    {
        var dialogOptions = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<UpdateFighterDialog>();
        parameters.Add(x => x.UpdateFighterRequest, new UpdateFighterRequest
            {
                Id = fighterDto.Id,
                FirstName = fighterDto.FirstName,
                LastName = fighterDto.LastName,
                Nickname = fighterDto.Nickname,
                ImageBase64 = ""
            });

        parameters.Add(x => x.Url, fighterDto.Image?.Url);

        var updateFighterDialog = await DialogService.ShowAsync<UpdateFighterDialog>("Update Fighter", parameters, dialogOptions);
        var result = await updateFighterDialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }

    private async Task CreateFighter()
    {
        var dialogOptions = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<CreateFighterDialog>();
        parameters.Add(x => x.CreateFighterRequest, new CreateFighterRequest());

        var createFighterDialog = await DialogService.ShowAsync<CreateFighterDialog>("Create Fighter", parameters, dialogOptions);
        var result = await createFighterDialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }
}
