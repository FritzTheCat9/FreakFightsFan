@page "/fighters"
@attribute [AllowAnonymous]

@inject IExceptionHandler ExceptionHandler
@inject IFighterApiClient FighterApiClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> Localizer

<PageTitle>
    @Localizer[nameof(AppStrings.Fighters)]
</PageTitle>

<FritzBreadcrumbs Items="_items" />

<MudTable ServerData="new Func<TableState, Task<TableData<FighterDto>>>(ServerReload)"
          Dense="true"
          Hover="true"
          @ref="table"
          Context="fighter">
    <ToolBarContent>
        <MudText Typo="Typo.h6">
            @Localizer[nameof(AppStrings.Fighters)]
        </MudText>
        <AuthorizeView Policy=@Policy.Admin>
            <MudIconButton Icon="@Icons.Material.Filled.Add"
                           Size="Size.Small"
                           OnClick="() => CreateFighter()" />
        </AuthorizeView>
        <MudSpacer />
        <FritzSearchTextField @bind-Value="searchString"
                              OnSearch="() => table.ReloadServerData()" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            @Localizer[nameof(AppStrings.Image)]
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="firstname"
                               T="FighterDto">
                @Localizer[nameof(AppStrings.FirstName)]
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="lastname"
                               T="FighterDto">
                @Localizer[nameof(AppStrings.LastName)]
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="nickname"
                               T="FighterDto">
                @Localizer[nameof(AppStrings.Nickname)]
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            @Localizer[nameof(AppStrings.Actions)]
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            @if (fighter.Image != null)
            {
                <MudLink Href="@fighter.Image.Url"
                         Target="_blank">
                    <MudImage Src="@fighter.Image.Url"
                              ObjectFit="ObjectFit.Contain"
                              Width="200"
                              Height="150"
                              Alt="@Localizer[nameof(AppStrings.Image)]" />
                </MudLink>
            }
            else
            {
                <MudImage Src="images_default/default_user_image.png"
                          ObjectFit="ObjectFit.Contain"
                          Width="200"
                          Height="150"
                          Alt="@Localizer[nameof(AppStrings.Image)]" />
            }
        </MudTd>
        <MudTd DataLabel="FirstName">
            @fighter.FirstName
        </MudTd>
        <MudTd DataLabel="LastName">
            @fighter.LastName
        </MudTd>
        <MudTd DataLabel="Nickname">
            @fighter.Nickname
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.AccountCircle"
                           Size="Size.Small"
                           OnClick="() => RedirectToFighterProfile(fighter.Id)" />
            <AuthorizeView Policy=@Policy.Admin>
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                               Size="Size.Small"
                               OnClick="() => UpdateFighter(fighter)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Size="Size.Small"
                               OnClick="() => DeleteFighter(fighter.Id)" />
            </AuthorizeView>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>
            @Localizer[nameof(AppStrings.NoMatchingRecordsFound)]
        </MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>
            @Localizer[nameof(AppStrings.Loading)]
        </MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager RowsPerPageString="@Localizer[nameof(AppStrings.RowsPerPage)]"
                       InfoFormat="@Localizer[nameof(AppStrings.PaginationInfoFormat)]" />
    </PagerContent>
</MudTable>

@code {
    private List<BreadcrumbItem> _items;

    private string searchString = "";
    private MudTable<FighterDto> table;
    private PagedList<FighterDto> MyFighters { get; set; }

    protected override void OnInitialized()
    {
        _items = new()
        {
            new(Localizer[nameof(AppStrings.Fighters)], href: null, disabled: true),
        };
    }

    private async Task<TableData<FighterDto>> ServerReload(TableState state)
    {
        var query = new GetAllFighters.Query
            {
                Page = state.Page + 1,
                PageSize = state.PageSize,
                SortColumn = state.SortLabel,
                SortOrder = ((SortOrder)state.SortDirection),
                SearchTerm = searchString,
            };

        try
        {
            MyFighters = await FighterApiClient.GetAllFighters(query);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            return new() { TotalItems = 0, Items = [] };
        }

        return new()
            {
                TotalItems = MyFighters.TotalCount,
                Items = MyFighters.Items
            };
    }

    private async Task DeleteFighter(int id)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<DeleteDialog>(@Localizer[nameof(AppStrings.Delete)], options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                await FighterApiClient.DeleteFighter(id);
                await table.ReloadServerData();
            }
            catch (Exception ex)
            {
                ExceptionHandler.HandleExceptions(ex);
            }
        }
    }

    private async Task UpdateFighter(FighterDto fighterDto)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<UpdateFighterDialog>();
        parameters.Add(x => x.Command, new()
            {
                Id = fighterDto.Id,
                FirstName = fighterDto.FirstName,
                LastName = fighterDto.LastName,
                Nickname = fighterDto.Nickname,
                InstagramUrl = fighterDto.InstagramUrl,
                ImageBase64 = ""
            });
        parameters.Add(x => x.Url, fighterDto.Image?.Url);

        var dialog = await DialogService.ShowAsync<UpdateFighterDialog>(Localizer[nameof(AppStrings.UpdateFighter)], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }

    private async Task CreateFighter()
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<CreateFighterDialog>();

        parameters.Add(x => x.Command, new());

        var dialog = await DialogService.ShowAsync<CreateFighterDialog>(Localizer[nameof(AppStrings.CreateFighter)], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }

    private void RedirectToFighterProfile(int fighterId)
    {
        NavigationManager.NavigateTo($"/fighter/{fighterId}");
    }
}
