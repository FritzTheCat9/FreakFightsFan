@page "/fighters"
@attribute [AllowAnonymous]

@inject IExceptionHandler ExceptionHandler
@inject IFighterApiClient FighterApiClient
@inject MudBlazor.IDialogService DialogService
@inject NavigationManager NavigationManager

<PageTitle>Fighters</PageTitle>

<MudBreadcrumbs Items="_items">
    <ItemTemplate Context="item">
        <MudLink Href="@item.Href">@item.Text</MudLink>
    </ItemTemplate>
</MudBreadcrumbs>

<MudTable ServerData="@(new Func<TableState, Task<TableData<FighterDto>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table" Context="fighter">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Fighters</MudText>
        <AuthorizeView Policy=@($"{Policy.Admin}")>
            <MudIconButton Icon="@MudBlazor.Icons.Material.Filled.Add" Size="Size.Small" OnClick="@(() => CreateFighter())"/>
        </AuthorizeView>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(searchText => OnSearch(searchText))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@MudBlazor.Icons.Material.Filled.Search" IconSize="Size.Medium" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Image</MudTh>
        <MudTh><MudTableSortLabel SortLabel="firstname" T="FighterDto">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="lastname" T="FighterDto">Last Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="nickname" T="FighterDto">Nickname</MudTableSortLabel></MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            @if (fighter.Image != null)
            {
                <MudLink Href="@fighter.Image.Url" Target="_blank">
                    <MudImage Src="@fighter.Image.Url" ObjectFit="ObjectFit.Contain" Width="200" Height="150" Alt="Image" />
                </MudLink>
            }
            else
            {
                <MudImage Src="images_default/default_user_image.png" ObjectFit="ObjectFit.Contain" Width="200" Height="150" Alt="Image" />
            }
        </MudTd>
        <MudTd DataLabel="FirstName">@fighter.FirstName</MudTd>
        <MudTd DataLabel="LastName">@fighter.LastName</MudTd>
        <MudTd DataLabel="Nickname">@fighter.Nickname</MudTd>
        <MudTd>
            <MudIconButton Icon="@MudBlazor.Icons.Material.Filled.AccountCircle" Size="Size.Small" OnClick="@(() => RedirectToFighterProfile(fighter.Id))"/>
            <AuthorizeView Policy=@($"{Policy.Admin}")>
                <MudIconButton Icon="@MudBlazor.Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => UpdateFighter(@fighter))"/>
                <MudIconButton Icon="@MudBlazor.Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => DeleteFighter(@fighter.Id))"/>
            </AuthorizeView>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private List<BreadcrumbItem> _items = new()
    {
        new("Fighters", href: null, disabled: true),
    };

    private MudTable<FighterDto> table;
    private string searchString = "";
    public PagedList<FighterDto> FightersPagedList { get; set; }

    private async Task<TableData<FighterDto>> ServerReload(TableState state)
    {
        var query = new GetAllFighters.Query
        {
            Page = state.Page + 1,
            PageSize = state.PageSize,
            SortColumn = state.SortLabel,
            SortOrder = ((SortOrder)state.SortDirection),
            SearchTerm = searchString,
        };

        try
        {
            FightersPagedList = await FighterApiClient.GetAllFighters(query);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            return new() { TotalItems = 0, Items = [] };
        }

        return new()
        {
            TotalItems = FightersPagedList.TotalCount,
            Items = FightersPagedList.Items
        };
    }

    private void OnSearch(string searchText)
    {
        searchString = searchText;
        table.ReloadServerData();
    }

    private async Task DeleteFighter(int id)
    {
        var dialogOptions = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var simpleDialog = await DialogService.ShowAsync<DeleteDialog>("Delete", dialogOptions);

        var result = await simpleDialog.Result;
        if (!result.Canceled)
        {
            try
            {
                await FighterApiClient.DeleteFighter(id);
                await table.ReloadServerData();
            }
            catch (Exception ex)
            {
                ExceptionHandler.HandleExceptions(ex);
            }
        }
    }

    private async Task UpdateFighter(FighterDto fighterDto)
    {
        var dialogOptions = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new MudBlazor.DialogParameters<UpdateFighterDialog>();

        parameters.Add(x => x.UpdateFighterCommand, new()
        {
            Id = fighterDto.Id,
            FirstName = fighterDto.FirstName,
            LastName = fighterDto.LastName,
            Nickname = fighterDto.Nickname,
            InstagramUrl = fighterDto.InstagramUrl,
            ImageBase64 = ""
        });
        parameters.Add(x => x.Url, fighterDto.Image?.Url);

        var updateFighterDialog = await DialogService.ShowAsync<UpdateFighterDialog>("Update Fighter", parameters, dialogOptions);
        var result = await updateFighterDialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }

    private async Task CreateFighter()
    {
        var dialogOptions = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new MudBlazor.DialogParameters<CreateFighterDialog>();

        parameters.Add(x => x.CreateFighterCommand, new());

        var createFighterDialog = await DialogService.ShowAsync<CreateFighterDialog>("Create Fighter", parameters, dialogOptions);
        var result = await createFighterDialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }

    public void RedirectToFighterProfile(int fighterId)
    {
        NavigationManager.NavigateTo($"/fighter/{fighterId}");
    }
}
