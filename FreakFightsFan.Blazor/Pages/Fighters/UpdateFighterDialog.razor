@inject IFighterApiClient FighterApiClient
@inject IExceptionHandler ExceptionHandler

<MudForm Model="UpdateFighterCommand" @ref="form" Validation="validationErrors.Validate">
    <MudDialog DefaultFocus="DefaultFocus.LastChild">
        <DialogContent>
            <MyFileInput @bind-ImageBase64="UpdateFighterCommand.ImageBase64" @bind-IsImageValid="IsImageValid" @bind-ValidationErrors="validationErrors.Errors" Url="@Url" />
            <MyValidationMessage T="string" For="() => UpdateFighterCommand.ImageBase64" ValidationErrors="validationErrors" />

            <MudTextField Label="First Name" @bind-Value="UpdateFighterCommand.FirstName" For="() => UpdateFighterCommand.FirstName" />
            <MudTextField Label="Last Name" @bind-Value="UpdateFighterCommand.LastName" For="() => UpdateFighterCommand.LastName" />
            <MudTextField Label="Nickname" @bind-Value="UpdateFighterCommand.Nickname" For="() => UpdateFighterCommand.Nickname" />
            <MudTextField Label="Instagram Url" @bind-Value="UpdateFighterCommand.InstagramUrl" For="() => UpdateFighterCommand.InstagramUrl" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton OnClick="HandleValidSubmit" Color="Color.Primary">Update</MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public UpdateFighter.Command UpdateFighterCommand { get; set; } = new();
    [Parameter] public string Url { get; set; }

    private ValidationErrors validationErrors = new();
    private MudForm form;
    private bool IsImageValid { get; set; }

    private void Cancel() => MudDialog.Cancel();

    private async Task HandleValidSubmit()
    {
        try
        {
            if (!IsImageValid)
                UpdateFighterCommand.ImageBase64 = null;

            await FighterApiClient.UpdateFighter(UpdateFighterCommand);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (MyValidationException validationException)
        {
            validationErrors.Errors = validationException.Errors;
            await form.Validate();
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }
    }
}