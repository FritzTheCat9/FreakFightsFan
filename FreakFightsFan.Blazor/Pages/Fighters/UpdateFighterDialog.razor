@inject IFighterHttpService FighterHttpService
@inject IExceptionHandler ExceptionHandler

<MudForm Model="FighterDto" @ref="@form" Validation="ValidateValue">
    <MudDialog>
        <DialogContent>
            <MudTextField Label="First Name" @bind-Value="FighterDto.FirstName" For="@(() => FighterDto.FirstName)"></MudTextField>
            <MudTextField Label="Last Name" @bind-Value="FighterDto.LastName" For="@(() => FighterDto.LastName)"></MudTextField>
            <MudTextField Label="Nickname" @bind-Value="FighterDto.Nickname" For="@(() => FighterDto.Nickname)"></MudTextField>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton OnClick="HandleValidSubmit" Color="Color.Primary">Update</MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public FighterDto FighterDto { get; set; } = new FighterDto();

    private Dictionary<string, List<string>> validationErrors = new Dictionary<string, List<string>>();
    private MudForm form;

    private void Cancel() => MudDialog.Cancel();

    private async Task HandleValidSubmit()
    {
        try
        {
            await FighterHttpService.UpdateFighter(new UpdateFighterRequest
                {
                    Id = FighterDto.Id,
                    FirstName = FighterDto.FirstName,
                    LastName = FighterDto.LastName,
                    Nickname = FighterDto.Nickname,

                });
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (MyValidationException validationException)
        {
            validationErrors = validationException.Errors;
            await form.Validate();
        }
        catch (CustomException ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }
    }

    private Func<object, string, List<string>> ValidateValue => (model, propertyName) =>
    {
        if (!validationErrors.ContainsKey(propertyName))
            validationErrors.Add(propertyName, new List<string>());

        return validationErrors[propertyName];
    };
}