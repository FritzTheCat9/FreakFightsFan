@inject IFightApiClient FightApiClient
@inject IFighterApiClient FighterApiClient
@inject IMyDictionaryItemClientHelper MyDictionaryItemClientHelper
@inject IExceptionHandler ExceptionHandler

<MudForm Model="CreateFightCommand" @ref="@form" Validation="validationErrors.Validate">
    <MudDialog DefaultFocus="DefaultFocus.LastChild">
        <TitleContent>
            <MudStack Row="true" Justify="Justify.SpaceBetween">
                <MudText Typo="Typo.h6">Create Fight</MudText>
            </MudStack>
        </TitleContent>
        <DialogContent>
            <MudTabs Rounded="true">
                <MudTabPanel Text="Fight">
                    <MudGrid Spacing="1" Justify="Justify.FlexStart">
                        <MudItem xs="10">
                            <MudAutocomplete @ref="addFighterField" T="FighterDto" Label="Fighter" @bind-Value="_fighter" SearchFuncWithCancel="@Search" ToStringFunc="DisplayFighter"
                                             ShowProgressIndicator="true" SelectValueOnTab="true" ResetValueOnEmptyText="true" FullWidth="true" Variant="Variant.Text">
                                <NoItemsTemplate>
                                    <MudText>No fighters found</MudText>
                                </NoItemsTemplate>
                                <ItemTemplate>
                                    <DisplayFighterListItem Fighter="@context" />
                                </ItemTemplate>
                            </MudAutocomplete>
                            <MyValidationMessage T="List<CreateFight.CreateTeamModel>" For="@(() => CreateFightCommand.Teams)" ValidationErrors="validationErrors" />
                            <MyValidationMessage T="int" For="@(() => CreateFightCommand.EventId)" ValidationErrors="validationErrors" />
                        </MudItem>
                        <MudItem xs="2" Class="d-flex">
                            <MudButton OnClick="@(() => AddFighterToSelectedTeam())" Class="align-self-end" Color="MudBlazor.Color.Primary" Variant="Variant.Filled">Add</MudButton>
                        </MudItem>
                        @foreach (var team in _teams)
                        {
                            <MudItem xs="12" md="6" @onclick="@(() => SelectTeam(team.Number))" Style="cursor: pointer;">
                                <MudText Typo="Typo.h6" Color="(_selectedTeam == team.Number) ? MudBlazor.Color.Primary : MudBlazor.Color.Default" GutterBottom="true">
                                    Team @($"{team.Number + 1}")
                                </MudText>
                                @if (team.Fighters.Any())
                                {
                                    <MudPaper Width="100%" Class="@((_selectedTeam == team.Number) ? "mud-theme-primary" : "")">
                                        <MudList Style="cursor: auto;">
                                            @foreach (var fighter in team.Fighters)
                                            {
                                                <MudListItem>
                                                    <FighterListItem FighterHelperModel="@fighter" OnDeleteFighter="() => DeleteFighterListItem(team, fighter)" />
                                                </MudListItem>
                                            }
                                        </MudList>
                                    </MudPaper>
                                }
                            </MudItem>
                        }
                    </MudGrid>
                </MudTabPanel>
                <MudTabPanel Text="Options" Icon="@MudBlazor.Icons.Material.Filled.Settings">
                    <MudGrid Spacing="1" Justify="Justify.FlexStart">
                        <MudItem xs="12">
                            <ChildContent>
                                <MudSelect T="int" Label="Number of teams" @bind-Value="NumberOfTeams"
                                           SelectedValuesChanged="OnSelectedValuesChanged" MultiSelection="false">
                                    @foreach (var number in allowedTeamSizes)
                                    {
                                        <MudSelectItem Value="@number" />
                                    }
                                </MudSelect>
                            </ChildContent>
                        </MudItem>
                        <MudItem xs="12">
                            <MudAutocomplete T="MyDictionaryItemDto" Label="Type" @bind-Value="FightType" SearchFuncWithCancel="@MyDictionaryItemClientHelper.SearchFightType" Variant="Variant.Text"
                                ShowProgressIndicator="true" ToStringFunc="@MyDictionaryItemClientHelper.DisplayDictionaryItem" SelectValueOnTab="true" ResetValueOnEmptyText="true" FullWidth="true">
                                <NoItemsTemplate>
                                    <MudText>No items found in dictionary with code: "@DictionaryCode.FightType"</MudText>
                                </NoItemsTemplate>
                            </MudAutocomplete>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="CreateFightCommand.VideoUrl" For="() => CreateFightCommand.VideoUrl" Label="Youtube video url" Variant="Variant.Text" />
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
            </MudTabs>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton OnClick="HandleValidSubmit" Color="MudBlazor.Color.Primary">Create</MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public CreateFight.Command CreateFightCommand { get; set; } = new();
    [Parameter] public int NumberOfTeams { get; set; }

    private ValidationErrors validationErrors = new();
    private MudForm form;
    private MudAutocomplete<FighterDto> addFighterField;

    private List<int> allowedTeamSizes = [ 2, 3, 4, 5 ];
    private FighterDto _fighter;
    private int _selectedTeam;
    private List<CreateFight.TeamHelperModel> _teams = [];

    public MyDictionaryItemDto FightType { get; set; }

    protected override void OnInitialized()
    {
        ResetTeams(NumberOfTeams);
    }

    private void DeleteFighterListItem(CreateFight.TeamHelperModel team, CreateFight.FighterHelperModel fighter)
    {
        var pickedTeam = _teams.FirstOrDefault(x => x.Number == team.Number);
        if (pickedTeam is not null)
        {
            var fighterToRemove = pickedTeam.Fighters.FirstOrDefault(x => x.Fighter.Id == fighter.Fighter.Id);
            if(fighterToRemove is not null)
            {
                pickedTeam.Fighters.Remove(fighterToRemove);
            }
        }
    }

    private async Task AddFighterToSelectedTeam()
    {
        if (_fighter != null)
        {
            _teams[_selectedTeam].Fighters.Add(new() { Fighter = _fighter, FightResult = FightResult.UPCOMING });
            _fighter = null;
            _selectedTeam = (_selectedTeam + 1) % NumberOfTeams;
            await addFighterField.FocusAsync();
        }
    }

    private void SelectTeam(int number)
    {
        _selectedTeam = number;
    }

    private void OnSelectedValuesChanged(IEnumerable<int> values)
    {
        var teamsCount = values.First();
        ResetTeams(teamsCount);
    }

    private void ResetTeams(int teamsCount)
    {
        _teams = [];

        for (int i = 0; i < teamsCount; i++)
        {
            _teams.Add(new()
            {
                Number = i,
                Fighters = [],
            });
        }

        _selectedTeam = 0;
    }

    private List<int> GetHiddenFightersIds()
    {
        var fightersToHide = new List<int>();

        foreach (var team in _teams)
        {
            foreach (var fighter in team.Fighters)
            {
                if (!fightersToHide.Contains(fighter.Fighter.Id))
                    fightersToHide.Add(fighter.Fighter.Id);
            }
        }

        return fightersToHide;
    }

    private Func<FighterDto, string> DisplayFighter = fighter => 
        fighter is null ? null : $@"{fighter.FirstName} {fighter.LastName} - ""{fighter.Nickname}""";

    private async Task<IEnumerable<FighterDto>> Search(string value, CancellationToken token)
    {
        PagedList<FighterDto> FightersPagedList = null;

        var query = new GetAllFighters.Query
        {
            Page = 1,
            PageSize = 10,
            SortColumn = "name",
            SortOrder = SortOrder.Ascending,
            SearchTerm = value ?? "",
            HiddenFightersIds = GetHiddenFightersIds(),
        };

        try
        {
            FightersPagedList = await FighterApiClient.GetAllFighters(query);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            return [];
        }

        return FightersPagedList.Items;
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task HandleValidSubmit()
    {
        try
        {
            CreateFightCommand.Teams = new List<CreateFight.CreateTeamModel>();

            foreach (var team in _teams)
            {
                var teamFighters = new List<CreateFight.TeamFighterModel>();
                foreach (var fighter in team.Fighters)
                {
                    var teamFighterModel = new CreateFight.TeamFighterModel()
                    {
                        FighterId = fighter.Fighter.Id,
                        FightResult = fighter.FightResult,
                    };

                    teamFighters.Add(teamFighterModel);
                }

                CreateFightCommand.Teams.Add(new() { Fighters = teamFighters });
            }

            CreateFightCommand.TypeId = FightType?.Id;

            await FightApiClient.CreateFight(CreateFightCommand);
            MudDialog.Close(MudBlazor.DialogResult.Ok(true));
        }
        catch (MyValidationException validationException)
        {
            validationErrors.Errors = validationException.Errors;
            await form.Validate();
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }
    }
}
