@inject IDialogService DialogService
@inject IJwtProvider JwtProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized>
        <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
            <MudText>@context.User.Identity.Name</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="Logout">Logout</MudButton>
        </MudStack>
    </Authorized>
    <NotAuthorized>
        <MudStack Row="true" Spacing="2">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="Login">Login</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick="Register">Register</MudButton>
        </MudStack>
    </NotAuthorized>
</AuthorizeView>

@code {
    private async Task Login()
    {
        var dialogOptions = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<LoginDialog>();
        parameters.Add(x => x.Command, new());

        var dialog = await DialogService.ShowAsync<LoginDialog>("Login", parameters, dialogOptions);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            if (result.Data is JwtDto token)
            {
                await JwtProvider.SetJwtDto(token);

                var authStateProvider = (AuthenticationStateProvider as AuthStateProvider);
                authStateProvider.NotifyAuthStateChanged();
            }
        }
    }

    private async Task Register()
    {
        var dialogOptions = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<RegisterDialog>();
        parameters.Add(x => x.Command, new());

        var dialog = await DialogService.ShowAsync<RegisterDialog>("Register", parameters, dialogOptions);
        var result = await dialog.Result;
        if (!result.Canceled)
            await OpenRegistrationSuccessDialog();
    }

    private async Task OpenRegistrationSuccessDialog()
    {
        var dialogOptions = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<SuccessDialog>();
        parameters.Add(x => x.ContentText, "The account has been successfully created. To log in, please confirm your email address by clicking on the activation link sent to your email inbox.");

        var dialog = await DialogService.ShowAsync<SuccessDialog>("Success", parameters, dialogOptions);
    }

    private async Task Logout()
    {
        await JwtProvider.RemoveJwtDto();

        var authStateProvider = (AuthenticationStateProvider as AuthStateProvider);
        authStateProvider.NotifyAuthStateChanged();

        NavigationManager.NavigateTo("/");
    }
}
