@inject IUserApiClient UserApiClient
@inject IExceptionHandler ExceptionHandler

<EditForm Model="RegisterCommand" OnValidSubmit="HandleValidSubmit">
    <CustomValidator @ref="CustomValidator" />
    <FluentValidationValidator />

    <MudDialog DefaultFocus="DefaultFocus.LastChild">
        <DialogContent>
            <MudTextField Label="Email" @bind-Value="RegisterCommand.Email" For="@(() => RegisterCommand.Email)" OnlyValidateIfDirty="true" />
            <ValidationMessage For="@(() => RegisterCommand.Email)" />
            <MudTextField Label="UserName" @bind-Value="RegisterCommand.UserName" For="@(() => RegisterCommand.UserName)" OnlyValidateIfDirty="true" />
            <ValidationMessage For="@(() => RegisterCommand.UserName)" />
            <PasswordField Label="Password" @bind-Value="RegisterCommand.Password" For="@(() => RegisterCommand.Password)" />
            <ValidationMessage For="@(() => RegisterCommand.Password)" />
            <PasswordField Label="Repeat Password" @bind-Value="RegisterCommand.RepeatPassword" For="@(() => RegisterCommand.RepeatPassword)" />
            <ValidationMessage For="@(() => RegisterCommand.RepeatPassword)" />
        </DialogContent>
        <DialogActions>
            <MudButton ButtonType="MudBlazor.ButtonType.Submit" Color="MudBlazor.Color.Primary" Disabled="@_processing">
                @if (_processing)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    <MudText>Processing...</MudText>
                }
                else
                {
                    <MudText Typo="Typo.subtitle2">REGISTER</MudText>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Register.Command RegisterCommand { get; set; } = new();

    private CustomValidator CustomValidator;

    private bool _processing;

    private void Cancel() => MudDialog.Cancel();

    private async Task HandleValidSubmit()
    {
        _processing = true;

        try
        {
            await UserApiClient.Register(RegisterCommand);
            MudDialog.Close(MudBlazor.DialogResult.Ok(true));
        }
        catch (MyValidationException validationException)
        {
            CustomValidator.DisplayErrors(validationException.Errors);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }

        _processing = false;
    }
}
