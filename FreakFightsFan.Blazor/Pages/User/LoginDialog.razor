@inject IUserApiClient UserApiClient
@inject IExceptionHandler ExceptionHandler

<EditForm Model="Command" OnValidSubmit="HandleValidSubmit">
    <CustomValidator @ref="CustomValidator" />
    <FluentValidationValidator />

    <MudDialog DefaultFocus="DefaultFocus.LastChild">
        <DialogContent>
            <MudTextField Label="Email" @bind-Value="Command.Email" For="() => Command.Email" />
            <ValidationMessage For="() => Command.Email" />

            <PasswordField @bind-Value="Command.Password" For="() => Command.Password" />
            <ValidationMessage For="() => Command.Password" />
        </DialogContent>
        <DialogActions>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Disabled="_processing">
                @if (_processing)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    <MudText>Processing...</MudText>
                }
                else
                {
                    <MudText Typo="Typo.subtitle2">LOGIN</MudText>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; }
    [Parameter] public Login.Command Command { get; set; } = new();

    private CustomValidator CustomValidator = new();
    private bool _processing;

    private async Task HandleValidSubmit()
    {
        _processing = true;

        try
        {
            var token = await UserApiClient.Login(Command);
            MudDialog.Close(DialogResult.Ok<JwtDto>(token));
        }
        catch (MyValidationException validationException)
        {
            CustomValidator.DisplayErrors(validationException.Errors);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }

        _processing = false;
    }
}
