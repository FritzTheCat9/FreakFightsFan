@inject IUserApiClient UserApiClient
@inject IExceptionHandler ExceptionHandler

<MudForm Model="LoginCommand" @ref="form" Validation="validationErrors.Validate">
    <MudDialog DefaultFocus="DefaultFocus.LastChild">
        <DialogContent>
            <MudTextField Label="Email" @bind-Value="LoginCommand.Email" For="() => LoginCommand.Email" />
            <PasswordField @bind-Value="LoginCommand.Password" For="() => LoginCommand.Password" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="HandleValidSubmit" Color="Color.Primary" Disabled="_processing">
                @if (_processing)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    <MudText>Processing...</MudText>
                }
                else
                {
                    <MudText Typo="Typo.subtitle2">LOGIN</MudText>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Login.Command LoginCommand { get; set; } = new();

    private ValidationErrors validationErrors = new();
    private MudForm form;

    private bool _processing;

    private void Cancel() => MudDialog.Cancel();

    private async Task HandleValidSubmit()
    {
        _processing = true;

        try
        {
            var token = await UserApiClient.Login(LoginCommand);
            MudDialog.Close(DialogResult.Ok<JwtDto>(token));
        }
        catch (MyValidationException validationException)
        {
            validationErrors.Errors = validationException.Errors;
            await form.Validate();
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }

        _processing = false;
    }
}
