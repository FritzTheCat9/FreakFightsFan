@page "/users"
@attribute [Authorize(Policy = Policy.Admin)]

@inject IExceptionHandler ExceptionHandler
@inject IUserApiClient UserApiClient
@inject IDialogService DialogService

<PageTitle>Users</PageTitle>

<MudBreadcrumbs Items="_items">
    <ItemTemplate Context="item">
        <MudLink Href="@item.Href">@item.Text</MudLink>
    </ItemTemplate>
</MudBreadcrumbs>

<MudTable ServerData="new Func<TableState, Task<TableData<UserDto>>>(ServerReload)"
          Dense="true" Hover="true" @ref="table" Context="user">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Users</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="(searchText) => OnSearch(searchText)" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" />
    </ToolBarContent>
    <HeaderContent>
        @* <MudTh>Image</MudTh> *@
        <MudTh><MudTableSortLabel SortLabel="username" T="UserDto">UserName</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="email" T="UserDto">Email</MudTableSortLabel></MudTh>
        <MudTh>Role</MudTh>
        <AuthorizeView Policy=@Policy.SuperAdmin>
            <MudTh>Actions</MudTh>
        </AuthorizeView>
    </HeaderContent>
    <RowTemplate>
       @*  <MudTd>
            @if (user.Image != null)
            {
                <MudLink Href="@user.Image.Url" Target="_blank">
                    <MudImage Src="@user.Image.Url" ObjectFit="ObjectFit.Contain" Width="200" Height="150" Alt="Image" />
                </MudLink>
            }
            else
            {
                <MudText>-</MudText>
            }
        </MudTd> *@
        <MudTd DataLabel="UserName">@user.UserName</MudTd>
        <MudTd DataLabel="Email">@user.Email</MudTd>
        <MudTh>
            <MudChip Variant="Variant.Outlined" Color="GetColorBasedOnPolicy(GetUserHighestPolicy(user))">@GetUserHighestPolicy(user)</MudChip>
        </MudTh>
        <AuthorizeView Policy=@Policy.SuperAdmin>
            <MudTd>
                @if(!user.IsSuperAdmin && user.IsAdmin)
                {
                    <MudTooltip Text="Degrade">
                        <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward" Size="Size.Small" OnClick="() => DegradeUser(user.Id)"/>
                    </MudTooltip>
                } 
                else if(!user.IsSuperAdmin && !user.IsAdmin)
                {
                    <MudTooltip Text="Promote">
                        <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" Size="Size.Small" OnClick="() => PromoteUser(user.Id)"/>
                    </MudTooltip>
                }

            </MudTd>
        </AuthorizeView>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private List<BreadcrumbItem> _items = new()
    {
        new("Users", href: null, disabled: true),
    };

    private MudTable<UserDto> table;
    private string searchString = "";
    public PagedList<UserDto> UsersPagedList { get; set; }

    private async Task<TableData<UserDto>> ServerReload(TableState state)
    {
        var query = new GetAllUsers.Query
        {
            Page = state.Page + 1,
            PageSize = state.PageSize,
            SortColumn = state.SortLabel,
            SortOrder = ((SortOrder)state.SortDirection),
            SearchTerm = searchString,
        };

        try
        {
            UsersPagedList = await UserApiClient.GetAllUsers(query);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            return new() { TotalItems = 0, Items = [] };
        }

        return new()
        {
            TotalItems = UsersPagedList.TotalCount,
            Items = UsersPagedList.Items
        };
    }

    private void OnSearch(string searchText)
    {
        searchString = searchText;
        table.ReloadServerData();
    }

    private async Task PromoteUser(int id)
    {
        var dialogOptions = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<InformationDialog>();
        parameters.Add(x => x.ContentText, "Are you certain you wish to increase the privileges of the chosen user?");

        var informationDialog = await DialogService.ShowAsync<InformationDialog>("Increase user permissions", parameters, dialogOptions);
        var result = await informationDialog.Result;
        if (!result.Canceled)
        {
            await UserApiClient.PromoteUser(id);
            await table.ReloadServerData();
        }
    }

    private async Task DegradeUser(int id)
    {
        var dialogOptions = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<InformationDialog>();
        parameters.Add(x => x.ContentText, "Are you certain you wish to decrease the privileges of the chosen user?");

        var informationDialog = await DialogService.ShowAsync<InformationDialog>("Decrease user permissions", parameters, dialogOptions);
        var result = await informationDialog.Result;
        if (!result.Canceled)
        {
            await UserApiClient.DegradeUser(id);
            await table.ReloadServerData();
        }
    }
    
    private string GetUserHighestPolicy(UserDto user)
    {
        if (user.IsSuperAdmin)
            return Policy.SuperAdmin;

        if (user.IsAdmin)
            return Policy.Admin;

        return Policy.User;
    }

    private Color GetColorBasedOnPolicy(string policy)
    {
        if (policy == Policy.SuperAdmin)
            return Color.Info;
            
        if (policy == Policy.Admin)
            return Color.Error;

        return Color.Success;
    }
}
