@page "/events/{FederationId:int}"
@attribute [AllowAnonymous]

@inject IExceptionHandler ExceptionHandler
@inject IEventApiClient EventApiClient
@inject MudBlazor.IDialogService DialogService
@inject Fluent.IDialogService FluentDialogService
@inject NavigationManager NavigationManager

<PageTitle>Events</PageTitle>

<MudBreadcrumbs Items="_items">
    <ItemTemplate Context="item">
        <MudLink Href="@item.Href">@item.Text</MudLink>
    </ItemTemplate>
</MudBreadcrumbs>

<MudTable ServerData="@(new Func<TableState, Task<TableData<EventDto>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table" Context="myEvent">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Events</MudText>
        <AuthorizeView Policy=@($"{Policy.Admin}")>
            <MudIconButton Icon="@MudBlazor.Icons.Material.Filled.Add" Size="Size.Small" OnClick="@(() => CreateEvent())"/>
        </AuthorizeView>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(searchText => OnSearch(searchText))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@MudBlazor.Icons.Material.Filled.Search" IconSize="Size.Medium" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="name" T="EventDto">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="date" T="EventDto">Date</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="city" T="EventDto">City</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="hall" T="EventDto">Hall</MudTableSortLabel></MudTh>
        <MudTh>Fights</MudTh>
        <AuthorizeView Policy=@($"{Policy.Admin}")>
            <MudTh>Actions</MudTh>
        </AuthorizeView>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@myEvent.Name</MudTd>
        <MudTd DataLabel="Date">@myEvent.Date.ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="City">
            @if (myEvent.City != null)
            {
                @myEvent.City.Name
            }
            else
            {
                <MudText>-</MudText>
            }
        </MudTd>
        <MudTd DataLabel="Hall">
            @if (myEvent.Hall != null)
            {
                @myEvent.Hall.Name
            }
            else
            {
                <MudText>-</MudText>
            }
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@MudBlazor.Icons.Material.Filled.List" Size="Size.Small" OnClick="@(() => RedirectToFightsPage(@myEvent.Id))"/>
        </MudTd>
        <AuthorizeView Policy=@($"{Policy.Admin}")>
            <MudTd>
                <MudIconButton Icon="@MudBlazor.Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => UpdateEvent(@myEvent))"/>
                <MudIconButton Icon="@MudBlazor.Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => DeleteEvent(@myEvent.Id))"/>
            </MudTd>
        </AuthorizeView>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    [Parameter] public int FederationId { get; set; }

    private List<BreadcrumbItem> _items = new()
    {
        new("Federations", href: "/federations"),
        new("Events", href: null, disabled: true),
    };

    private MudTable<EventDto> table;
    private string searchString = "";
    public PagedList<EventDto> EventsPagedList { get; set; }

    private async Task<TableData<EventDto>> ServerReload(TableState state)
    {
        var query = new GetAllEvents.Query
        {
            Page = state.Page + 1,
            PageSize = state.PageSize,
            SortColumn = state.SortLabel,
            SortOrder = ((SortOrder)state.SortDirection),
            SearchTerm = searchString,
            FederationId = FederationId,
        };

        try
        {
            EventsPagedList = await EventApiClient.GetAllEvents(query);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            return new() { TotalItems = 0, Items = [] };
        }

        return new()
        {
            TotalItems = EventsPagedList.TotalCount,
            Items = EventsPagedList.Items
        };
    }

    private void OnSearch(string searchText)
    {
        searchString = searchText;
        table.ReloadServerData();
    }

    private void RedirectToFightsPage(int eventId)
    {
        NavigationManager.NavigateTo($"/fights/{FederationId}/{eventId}");
    }

    private async Task DeleteEvent(int id)
    {
        var dialogOptions = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var simpleDialog = await DialogService.ShowAsync<DeleteDialog>("Delete", dialogOptions);

        var result = await simpleDialog.Result;
        if (!result.Canceled)
        {
            try
            {
                await EventApiClient.DeleteEvent(id);
                await table.ReloadServerData();
            }
            catch (Exception ex)
            {
                ExceptionHandler.HandleExceptions(ex);
            }
        }
    }

    private async Task UpdateEvent(EventDto eventDto)
    {
        var data = new UpdateEvent.DialogContent()
        { 
            Command = new UpdateEvent.Command()
            {
                Id = eventDto.Id,
                Name = eventDto.Name,
                Date = eventDto.Date,
                CityId = eventDto.City?.Id,
                HallId = eventDto.Hall?.Id
            },
             City = eventDto.City,
             Hall = eventDto.Hall,
        };

        var parameters = new Fluent.DialogParameters()
        {
            Title = $"Update Event",
            Width = "500px",
            TrapFocus = true,
        };

        var dialog = await FluentDialogService.ShowDialogAsync<UpdateEventDialog>(data, parameters);
        var result = await dialog.Result;
        if(!result.Cancelled)
            await table.ReloadServerData();
    }

    private async Task CreateEvent()
    {
        var data = new CreateEvent.Command()
        {
            Name = "",
            Date = DateTime.UtcNow,
            FederationId = FederationId,
            CityId = null,
            HallId = null,
        };

        var parameters = new Fluent.DialogParameters()
        {
            Title = $"Create Event",
            Width = "500px",
            TrapFocus = true,
        };

        var dialog = await FluentDialogService.ShowDialogAsync<CreateEventDialog>(data, parameters);
        var result = await dialog.Result;
        if(!result.Cancelled)
            await table.ReloadServerData();
    }
}
