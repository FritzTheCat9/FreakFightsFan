@implements IDialogContentComponent<CreateEvent.Command>

@inject IEventApiClient EventApiClient
@inject IExceptionHandler ExceptionHandler

<EditForm Model="Content" OnValidSubmit="HandleValidSubmit">
    <CustomValidator @ref="CustomValidator" />
    <FluentValidationValidator />

    <FluentDialogBody>
        <XTextField @bind-Value="Content.Name" For="(() => Content.Name)" Label="Name" />
        <FluentValidationMessage For="(() => Content.Name)" />

        <XDatePicker @bind-Value="Content.Date" For="(() => Content.Date)" Label="Date" />
        <FluentValidationMessage For="(() => Content.Date)" />
            
        <XDictionaryItemPicker @bind-Value="Content.CityId" DictionaryCode="@DictionaryCode.City" Label="City" Placeholder="Select city" />
        <FluentValidationMessage For="(() => Content.CityId)" />

        <XDictionaryItemPicker @bind-Value="Content.HallId" DictionaryCode="@DictionaryCode.Hall" Label="Hall" Placeholder="Select hall" />
        <FluentValidationMessage For="(() => Content.HallId)" />
    </FluentDialogBody>

    <FluentDialogFooter>
        <FluentButton Type="Fluent.ButtonType.Submit" Color="Fluent.Color.Info">Create</FluentButton>
    </FluentDialogFooter>
</EditForm>

@code {
    [CascadingParameter] FluentDialog Dialog { get; set; }
    [Parameter] public CreateEvent.Command Content { get; set; } = new();

    private CustomValidator CustomValidator;

    private async Task HandleValidSubmit()
    {
        try
        {
            await EventApiClient.CreateEvent(Content);
            await Dialog.CloseAsync(Fluent.DialogResult.Ok(true));
        }
        catch (MyValidationException validationException)
        {
            CustomValidator.DisplayErrors(validationException.Errors);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }
    }
}
