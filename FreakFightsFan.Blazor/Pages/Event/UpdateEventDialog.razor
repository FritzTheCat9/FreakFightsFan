@inject IEventApiClient EventApiClient
@inject IMyDictionaryItemApiClient MyDictionaryItemApiClient
@inject IExceptionHandler ExceptionHandler

<MudForm Model="UpdateEventRequest" @ref="@form" Validation="ValidateValue">
    <MudDialog DefaultFocus="DefaultFocus.LastChild">
        <DialogContent>
            <MudTextField Label="Name" @bind-Value="UpdateEventRequest.Name" For="@(() => UpdateEventRequest.Name)"></MudTextField>
            <MudDatePicker Label="Date" @bind-Date="UpdateEventRequest.Date" For="@(() => UpdateEventRequest.Date)" Editable="true" Placeholder="Select Date" />
            <MudAutocomplete T="MyDictionaryItemDto" Label="City" @bind-Value="City" SearchFuncWithCancel="@SearchCity" Variant="Variant.Text"
                             ShowProgressIndicator="true" ToStringFunc="DisplayDictionaryItem" SelectValueOnTab="true" ResetValueOnEmptyText="true" FullWidth="true">
                <NoItemsTemplate>
                    <MudText>No items found in dictionary with code: "@DictionaryCode.City"</MudText>
                </NoItemsTemplate>
            </MudAutocomplete>
            <MudAutocomplete T="MyDictionaryItemDto" Label="Hall" @bind-Value="Hall" SearchFuncWithCancel="@SearchHall" Variant="Variant.Text"
                             ShowProgressIndicator="true" ToStringFunc="DisplayDictionaryItem" SelectValueOnTab="true" ResetValueOnEmptyText="true" FullWidth="true">
                <NoItemsTemplate>
                    <MudText>No items found in dictionary with code: "@DictionaryCode.Hall"</MudText>
                </NoItemsTemplate>
            </MudAutocomplete>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton OnClick="HandleValidSubmit" Color="Color.Primary">Update</MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public UpdateEventRequest UpdateEventRequest { get; set; } = new UpdateEventRequest();
    [Parameter] public MyDictionaryItemDto City { get; set; } = null;
    [Parameter] public MyDictionaryItemDto Hall { get; set; } = null;

    private Dictionary<string, List<string>> validationErrors = new Dictionary<string, List<string>>();
    private MudForm form;

    private Func<MyDictionaryItemDto, string> DisplayDictionaryItem = item => item is null ? null : item.Name;
    private async Task<IEnumerable<MyDictionaryItemDto>> SearchCity(string value, CancellationToken token)
    {
        PagedList<MyDictionaryItemDto> DictionaryItemsPagedList = null;

        var getAllMyDictionaryItemsByCodeRequest = new GetAllMyDictionaryItemsByCodeRequest
            {
                Page = 1,
                PageSize = 10,
                SortColumn = "name",
                SortOrder = SortOrder.Ascending,
                SearchTerm = value ?? "",
                DictionaryCode = DictionaryCode.City
            };

        try
        {
            DictionaryItemsPagedList = await MyDictionaryItemApiClient.GetAllMyDictionaryItemsByCode(getAllMyDictionaryItemsByCodeRequest);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            return new List<MyDictionaryItemDto>();
        }

        return DictionaryItemsPagedList.Items;
    }

    private async Task<IEnumerable<MyDictionaryItemDto>> SearchHall(string value, CancellationToken token)
    {
        PagedList<MyDictionaryItemDto> DictionaryItemsPagedList = null;

        var getAllMyDictionaryItemsByCodeRequest = new GetAllMyDictionaryItemsByCodeRequest
            {
                Page = 1,
                PageSize = 10,
                SortColumn = "name",
                SortOrder = SortOrder.Ascending,
                SearchTerm = value ?? "",
                DictionaryCode = DictionaryCode.Hall
            };

        try
        {
            DictionaryItemsPagedList = await MyDictionaryItemApiClient.GetAllMyDictionaryItemsByCode(getAllMyDictionaryItemsByCodeRequest);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            return new List<MyDictionaryItemDto>();
        }

        return DictionaryItemsPagedList.Items;
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task HandleValidSubmit()
    {
        try
        {
            UpdateEventRequest.CityId = City?.Id;
            UpdateEventRequest.HallId = Hall?.Id;

            await EventApiClient.UpdateEvent(UpdateEventRequest);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (MyValidationException validationException)
        {
            validationErrors = validationException.Errors;
            await form.Validate();
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }
    }

    private Func<object, string, List<string>> ValidateValue => (model, propertyName) =>
    {
        if (!validationErrors.ContainsKey(propertyName))
            validationErrors.Add(propertyName, new List<string>());

        return validationErrors[propertyName];
    };
}
