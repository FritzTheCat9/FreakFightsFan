@implements IDialogContentComponent<UpdateEvent.DialogContent>

@inject IEventApiClient EventApiClient
@inject IExceptionHandler ExceptionHandler

<EditForm Model="Content.Command" OnValidSubmit="HandleValidSubmit">
    <CustomValidator @ref="CustomValidator" />
    <FluentValidationValidator />

    <FluentDialogBody>
        <XTextField @bind-Value="Content.Command.Name" For="(() => Content.Command.Name)" Label="Name" />
        <FluentValidationMessage For="(() => Content.Command.Name)" />

        <XDatePicker @bind-Value="Content.Command.Date" For="(() => Content.Command.Date)" Label="Date" />
        <FluentValidationMessage For="(() => Content.Command.Date)" />

        <XDictionaryItemPicker @bind-Value="Content.Command.CityId" DictionaryCode="@DictionaryCode.City" Label="City" Placeholder="Select city" DictionaryItem="Content.City" />
        <FluentValidationMessage For="(() => Content.Command.CityId)" />

        <XDictionaryItemPicker @bind-Value="Content.Command.HallId" DictionaryCode="@DictionaryCode.Hall" Label="Hall" Placeholder="Select hall" DictionaryItem="Content.Hall" />
        <FluentValidationMessage For="(() => Content.Command.HallId)" />
    </FluentDialogBody>

    <FluentDialogFooter>
        <FluentButton Type="Fluent.ButtonType.Submit" Color="Fluent.Color.Info">Update</FluentButton>
    </FluentDialogFooter>
</EditForm>

@code {
    [CascadingParameter] FluentDialog Dialog { get; set; }
    [Parameter] public UpdateEvent.DialogContent Content { get; set; } = new();

    private CustomValidator CustomValidator;

    private async Task HandleValidSubmit()
    {
        try
        {
            await EventApiClient.UpdateEvent(Content.Command);
            await Dialog.CloseAsync(Fluent.DialogResult.Ok(true));
        }
        catch (MyValidationException validationException)
        {
            CustomValidator.DisplayErrors(validationException.Errors);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }
    }
}
