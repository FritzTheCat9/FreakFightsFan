@inject IFederationApiClient FederationApiClient
@inject IExceptionHandler ExceptionHandler

<MudForm Model="CreateFederationRequest" @ref="@form" Validation="ValidateValue">
    <MudDialog DefaultFocus="DefaultFocus.LastChild">
        <DialogContent>
            <MyFileInput @bind-ImageBase64="CreateFederationRequest.ImageBase64" @bind-IsImageValid="IsImageValid" @bind-ValidationErrors="validationErrors" />
            <MyValidationMessage T="string" For="@(() => CreateFederationRequest.ImageBase64)" ValidationErrors="validationErrors" />

            <MudTextField Label="Name" @bind-Value="CreateFederationRequest.Name" For="@(() => CreateFederationRequest.Name)"></MudTextField>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton OnClick="HandleValidSubmit" Color="Color.Primary">Create</MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public CreateFederationRequest CreateFederationRequest { get; set; } = new CreateFederationRequest();

    private Dictionary<string, List<string>> validationErrors = new Dictionary<string, List<string>>();
    private MudForm form;
    private bool IsImageValid { get; set; }

    private void Cancel() => MudDialog.Cancel();

    private async Task HandleValidSubmit()
    {
        try
        {
            if (!IsImageValid)
                CreateFederationRequest.ImageBase64 = null;

            await FederationApiClient.CreateFederation(CreateFederationRequest);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (MyValidationException validationException)
        {
            validationErrors = validationException.Errors;
            await form.Validate();
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }
    }

    private Func<object, string, List<string>> ValidateValue => (model, propertyName) =>
    {
        if (!validationErrors.ContainsKey(propertyName))
            validationErrors.Add(propertyName, new List<string>());

        return validationErrors[propertyName];
    };
}
