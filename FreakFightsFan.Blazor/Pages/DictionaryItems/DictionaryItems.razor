@page "/dictionary/{DictionaryId:int}"
@attribute [Authorize(Policy = Policy.Admin)]

@inject IExceptionHandler ExceptionHandler
@inject IMyDictionaryItemApiClient MyDictionaryItemApiClient
@inject IDialogService DialogService
@inject IStringLocalizer<App> Localizer

<PageTitle>@Localizer[nameof(AppStrings.DictionaryItems)]</PageTitle>

<FritzBreadcrumbs Items="_items" />

<MudTable ServerData="new Func<TableState, Task<TableData<MyDictionaryItemDto>>>(ServerReload)"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@Localizer[nameof(AppStrings.DictionaryItems)]</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="() => CreateDictionaryItem()" />
        <MudSpacer />
        <FritzSearchTextField @bind-Value="searchString" OnSearch="() => table.ReloadServerData()" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="name" T="MyDictionaryItemDto">@Localizer[nameof(AppStrings.Name)]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="code" T="MyDictionaryItemDto">@Localizer[nameof(AppStrings.Code)]</MudTableSortLabel></MudTh>
        <MudTh>@Localizer[nameof(AppStrings.Actions)]</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Code">@context.Code</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="() => UpdateDictionaryItem(context)" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="() => DeleteDictionaryItem(context.Id)" />
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>@Localizer[nameof(AppStrings.NoMatchingRecordsFound)]</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>@Localizer[nameof(AppStrings.Loading)]</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager RowsPerPageString="@Localizer[nameof(AppStrings.RowsPerPage)]" InfoFormat="@Localizer[nameof(AppStrings.PaginationInfoFormat)]" />
    </PagerContent>
</MudTable>

@code {
    [Parameter] public int DictionaryId { get; set; }

    private List<BreadcrumbItem> _items;
    private string searchString = "";
    private MudTable<MyDictionaryItemDto> table;
    private PagedList<MyDictionaryItemDto> MyDictionaryItems { get; set; }

    protected override void OnInitialized()
    {
        _items = new()
        {
            new(Localizer[nameof(AppStrings.Dictionaries)], href: "/dictionaries"),
            new(Localizer[nameof(AppStrings.DictionaryItems)], href: null, disabled: true),
        };
    }

    private async Task<TableData<MyDictionaryItemDto>> ServerReload(TableState state)
    {
        var query = new GetAllMyDictionaryItems.Query
            {
                Page = state.Page + 1,
                PageSize = state.PageSize,
                SortColumn = state.SortLabel,
                SortOrder = ((SortOrder)state.SortDirection),
                SearchTerm = searchString,
                DictionaryId = DictionaryId,
            };

        try
        {
            MyDictionaryItems = await MyDictionaryItemApiClient.GetAllMyDictionaryItems(query);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            return new() { TotalItems = 0, Items = [] };
        }

        return new()
            {
                TotalItems = MyDictionaryItems.TotalCount,
                Items = MyDictionaryItems.Items
            };
    }

    private async Task DeleteDictionaryItem(int id)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<DeleteDialog>(Localizer[nameof(AppStrings.Delete)], options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                await MyDictionaryItemApiClient.DeleteMyDictionaryItem(id);
                await table.ReloadServerData();
            }
            catch (Exception ex)
            {
                ExceptionHandler.HandleExceptions(ex);
            }
        }
    }

    private async Task UpdateDictionaryItem(MyDictionaryItemDto myDictionaryItemDto)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<UpdateDictionaryItemDialog>();
        parameters.Add(x => x.Command, new()
            {
                Id = myDictionaryItemDto.Id,
                Name = myDictionaryItemDto.Name,
                Code = myDictionaryItemDto.Code,
            });

        var dialog = await DialogService.ShowAsync<UpdateDictionaryItemDialog>(Localizer[nameof(AppStrings.UpdateDictionaryItem)], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }

    private async Task CreateDictionaryItem()
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<CreateDictionaryItemDialog>();
        parameters.Add(x => x.Command, new()
            {
                Name = "",
                Code = "",
                DictionaryId = DictionaryId,
            });

        var dialog = await DialogService.ShowAsync<CreateDictionaryItemDialog>(Localizer[nameof(AppStrings.CreateDictionaryItem)], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }
}
