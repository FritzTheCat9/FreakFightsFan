@page "/dictionary/{DictionaryId:int}"
@attribute [Authorize(Policy = Policy.Admin)]

@inject IExceptionHandler ExceptionHandler
@inject IMyDictionaryItemApiClient MyDictionaryItemApiClient
@inject MudBlazor.IDialogService DialogService
@inject Fluent.IDialogService FluentDialogService

<PageTitle>Dictionary items</PageTitle>

<MudBreadcrumbs Items="_items">
    <ItemTemplate Context="item">
        <MudLink Href="@item.Href">@item.Text</MudLink>
    </ItemTemplate>
</MudBreadcrumbs>

<MudTable ServerData="@(new Func<TableState, Task<TableData<MyDictionaryItemDto>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Dictionary Items</MudText>
        <MudIconButton Icon="@MudBlazor.Icons.Material.Filled.Add" Size="Size.Small" OnClick="@(() => CreateDictionaryItem())"/>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(searchText => OnSearch(searchText))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@MudBlazor.Icons.Material.Filled.Search" IconSize="Size.Medium" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="name" T="MyDictionaryItemDto">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="code" T="MyDictionaryItemDto">Code</MudTableSortLabel></MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Code">@context.Code</MudTd>
            <MudTd>
                <MudIconButton Icon="@MudBlazor.Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => UpdateDictionaryItem(@context))"/>
                <MudIconButton Icon="@MudBlazor.Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => DeleteDictionaryItem(@context.Id))"/>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

@code {
    [Parameter] public int DictionaryId { get; set; }

    private List<BreadcrumbItem> _items = new()
    {
        new("Dictionaries", href: "/dictionaries"),
        new("Dictionary Items", href: null, disabled: true),
    };

    private string searchString = "";
    private MudTable<MyDictionaryItemDto> table;
    public PagedList<MyDictionaryItemDto> MyDictionaryItemsPagedList { get; set; }

    private async Task<TableData<MyDictionaryItemDto>> ServerReload(TableState state)
    {
        var query = new GetAllMyDictionaryItems.Query
        {
            Page = state.Page + 1,
            PageSize = state.PageSize,
            SortColumn = state.SortLabel,
            SortOrder = ((SortOrder)state.SortDirection),
            SearchTerm = searchString,
            DictionaryId = DictionaryId,
        };

        try
        {
            MyDictionaryItemsPagedList = await MyDictionaryItemApiClient.GetAllMyDictionaryItems(query);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            return new() { TotalItems = 0, Items = [] };
        }

        return new()
        {
            TotalItems = MyDictionaryItemsPagedList.TotalCount,
            Items = MyDictionaryItemsPagedList.Items
        };
    }

    private void OnSearch(string searchText)
    {
        searchString = searchText;
        table.ReloadServerData();
    }

    private async Task DeleteDictionaryItem(int id)
    {
        var dialogOptions = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var simpleDialog = await DialogService.ShowAsync<DeleteDialog>("Delete", dialogOptions);

        var result = await simpleDialog.Result;
        if (!result.Canceled)
        {
            try
            {
                await MyDictionaryItemApiClient.DeleteMyDictionaryItem(id);
                await table.ReloadServerData();
            }
            catch (Exception ex)
            {
                ExceptionHandler.HandleExceptions(ex);
            }            
        }
    }

    private async Task UpdateDictionaryItem(MyDictionaryItemDto myDictionaryItemDto)
    {
        var data = new UpdateMyDictionaryItem.Command()
        {
            Id = myDictionaryItemDto.Id,
            Name = myDictionaryItemDto.Name,
            Code = myDictionaryItemDto.Code,
        };

        var parameters = new Fluent.DialogParameters()
        {
            Title = $"Update Dictionary Item",
            Width = "500px",
            TrapFocus = true,
        };

        var dialog = await FluentDialogService.ShowDialogAsync<UpdateDictionaryItemDialog>(data, parameters);
        var result = await dialog.Result;
        if(!result.Cancelled)
            await table.ReloadServerData();
    }

    private async Task CreateDictionaryItem()
    {
        var data = new CreateMyDictionaryItem.Command()
        {
            Name = "",
            Code = "",
            DictionaryId = DictionaryId,
        };

        var parameters = new Fluent.DialogParameters()
        {
            Title = $"Create Dictionary Item",
            Width = "500px",
            TrapFocus = true,
        };

        var dialog = await FluentDialogService.ShowDialogAsync<CreateDictionaryItemDialog>(data, parameters);
        var result = await dialog.Result;
        if(!result.Cancelled)
            await table.ReloadServerData();
    }
}
