@inject IMyDictionaryItemApiClient MyDictionaryItemApiClient
@inject IExceptionHandler ExceptionHandler

<MudForm Model="UpdateMyDictionaryItemCommand" @ref="@form" Validation="validationErrors.Validate">
    <MudDialog DefaultFocus="DefaultFocus.LastChild">
        <DialogContent>
            <MudTextField Label="Name" @bind-Value="UpdateMyDictionaryItemCommand.Name" For="@(() => UpdateMyDictionaryItemCommand.Name)" />
            <MudTextField Label="Code" @bind-Value="UpdateMyDictionaryItemCommand.Code" For="@(() => UpdateMyDictionaryItemCommand.Code)" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton OnClick="HandleValidSubmit" Color="MudBlazor.Color.Primary">Update</MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public UpdateMyDictionaryItem.Command UpdateMyDictionaryItemCommand { get; set; } = new();

    private ValidationErrors validationErrors = new();
    private MudForm form;

    private void Cancel() => MudDialog.Cancel();

    private async Task HandleValidSubmit()
    {
        try
        {
            await MyDictionaryItemApiClient.UpdateMyDictionaryItem(UpdateMyDictionaryItemCommand);
            MudDialog.Close(MudBlazor.DialogResult.Ok(true));
        }
        catch (MyValidationException validationException)
        {
            validationErrors.Errors = validationException.Errors;
            await form.Validate();
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }
    }
}