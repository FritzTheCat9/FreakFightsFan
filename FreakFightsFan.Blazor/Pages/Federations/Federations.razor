@page "/federations"
@attribute [AllowAnonymous]

@inject IExceptionHandler ExceptionHandler
@inject IFederationApiClient FederationApiClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> Localizer

<PageTitle>
    @Localizer[nameof(AppStrings.Federations)]
</PageTitle>

<FritzBreadcrumbs Items="_items" />

<MudTable ServerData="new Func<TableState, Task<TableData<FederationDto>>>(ServerReload)"
          Dense="true"
          Hover="true"
          @ref="table"
          Context="federation">
    <ToolBarContent>
        <MudText Typo="Typo.h6">
            @Localizer[nameof(AppStrings.Federations)]
        </MudText>
        <AuthorizeView Policy=@Policy.Admin>
            <MudIconButton Icon="@Icons.Material.Filled.Add"
                           Size="Size.Small"
                           OnClick="() => CreateFederation()" />
        </AuthorizeView>
        <MudSpacer />
        <FritzSearchTextField @bind-Value="searchString"
                              OnSearch="() => table.ReloadServerData()" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            @Localizer[nameof(AppStrings.Image)]
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="name"
                               T="FederationDto">
                @Localizer[nameof(AppStrings.Name)]
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            @Localizer[nameof(AppStrings.Events)]
        </MudTh>
        <AuthorizeView Policy=@Policy.Admin>
            <MudTh>
                @Localizer[nameof(AppStrings.Actions)]
            </MudTh>
        </AuthorizeView>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            @if (federation.Image != null)
            {
                <MudLink Href="@federation.Image.Url"
                         Target="_blank">
                    <MudImage Src="@federation.Image.Url"
                              ObjectFit="ObjectFit.Contain"
                              Width="200"
                              Height="150"
                              Alt="@Localizer[nameof(AppStrings.Image)]" />
                </MudLink>
            }
            else
            {
                <MudText>
                    -
                </MudText>
            }
        </MudTd>
        <MudTd DataLabel="Name">
            @federation.Name
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.List"
                           Size="Size.Small"
                           OnClick="() => RedirectToEventsPage(federation.Id)" />
        </MudTd>
        <AuthorizeView Policy=@Policy.Admin>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                               Size="Size.Small"
                               OnClick="() => UpdateFederation(federation)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Size="Size.Small"
                               OnClick="() => DeleteFederation(federation.Id)" />
            </MudTd>
        </AuthorizeView>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>
            @Localizer[nameof(AppStrings.NoMatchingRecordsFound)]
        </MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>
            @Localizer[nameof(AppStrings.Loading)]
        </MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager RowsPerPageString="@Localizer[nameof(AppStrings.RowsPerPage)]"
                       InfoFormat="@Localizer[nameof(AppStrings.PaginationInfoFormat)]" />
    </PagerContent>
</MudTable>

@code {
    private List<BreadcrumbItem> _items;

    private string searchString = "";
    private MudTable<FederationDto> table;
    public PagedList<FederationDto> MyFederations { get; set; }

    protected override void OnInitialized()
    {
        _items = new()
        {
            new(Localizer[nameof(AppStrings.Federations)], href: null, disabled: true),
        };
    }

    private async Task<TableData<FederationDto>> ServerReload(TableState state)
    {
        var query = new GetAllFederations.Query
            {
                Page = state.Page + 1,
                PageSize = state.PageSize,
                SortColumn = state.SortLabel,
                SortOrder = ((SortOrder)state.SortDirection),
                SearchTerm = searchString,
            };

        try
        {
            MyFederations = await FederationApiClient.GetAllFederations(query);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            return new() { TotalItems = 0, Items = [] };
        }

        return new()
            {
                TotalItems = MyFederations.TotalCount,
                Items = MyFederations.Items
            };
    }

    private void RedirectToEventsPage(int id)
    {
        NavigationManager.NavigateTo($"/events/{id}");
    }

    private async Task DeleteFederation(int id)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<DeleteDialog>(Localizer[nameof(AppStrings.Delete)], options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                await FederationApiClient.DeleteFederation(id);
                await table.ReloadServerData();
            }
            catch (Exception ex)
            {
                ExceptionHandler.HandleExceptions(ex);
            }
        }
    }

    private async Task UpdateFederation(FederationDto federationDto)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<UpdateFederationDialog>();
        parameters.Add(x => x.Command, new()
            {
                Id = federationDto.Id,
                Name = federationDto.Name,
                ImageBase64 = "",
            });
        parameters.Add(x => x.Url, federationDto.Image?.Url);

        var dialog = await DialogService.ShowAsync<UpdateFederationDialog>(Localizer[nameof(AppStrings.UpdateFederation)], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }

    private async Task CreateFederation()
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<CreateFederationDialog>();
        parameters.Add(x => x.Command, new());

        var dialog = await DialogService.ShowAsync<CreateFederationDialog>(Localizer[nameof(AppStrings.CreateFederation)], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }
}
