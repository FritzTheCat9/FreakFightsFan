@if (FighterHelperModel != null)
{
    <MudItem Class="d-flex">
        <MudStack Row="true">
            <MudAvatar Size="Size.Large">
                <ChildContent>
                    @if (!string.IsNullOrEmpty(FighterHelperModel.Fighter.Image?.Url))
                    {
                        <MudImage Src="@FighterHelperModel.Fighter.Image.Url" />
                    }
                    else
                    {
                        <MudImage Src="images_default/default_user_image.png" ObjectFit="ObjectFit.Contain" Fluid="true" Alt="Image" Style="max-height: 250px;" />
                    }
                </ChildContent>
            </MudAvatar>
            <MudText Class="align-self-center">@FighterHelperModel.Fighter.FirstName @FighterHelperModel.Fighter.LastName - @FighterHelperModel.Fighter.Nickname</MudText>
            @if (OnDeleteFighter.HasDelegate)
            {
                <MudIconButton Class="align-self-center" Icon="@MudBlazor.Icons.Material.Filled.Delete" Size="Size.Small" OnClick="DeleteFighter" />
            }
        </MudStack>
    </MudItem>

    <MudGrid Spacing="1" Justify="Justify.Center">
        <MudItem xs="12">
            <MudSelect @bind-Value="FighterHelperModel.FightResult" Label="Fight result">
                @foreach (FightResult fightResult in Enum.GetValues(typeof(FightResult)))
                {
                    <MudSelectItem Value="@fightResult">@fightResult.ToText()</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter] public CreateFight.FighterHelperModel FighterHelperModel { get; set; }
    [Parameter] public EventCallback OnDeleteFighter { get; set; }

    private void DeleteFighter()
    {
        OnDeleteFighter.InvokeAsync();
    }
}
